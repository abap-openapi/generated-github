CLASS zcl_ghes221 DEFINITION PUBLIC.
* Generated by abap-openapi-client
* GitHub v3 REST API
  PUBLIC SECTION.
    INTERFACES zif_ghes221.
    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client.
  PROTECTED SECTION.
    DATA mi_client TYPE REF TO if_http_client.
    DATA mo_json TYPE REF TO zcl_oapi_json.
    METHODS send_receive RETURNING VALUE(rv_code) TYPE i.
    METHODS parse_global_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(global_hook) TYPE zif_ghes221=>global_hook
      RAISING cx_static_check.
    METHODS parse_global_hook_2
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(global_hook_2) TYPE zif_ghes221=>global_hook_2
      RAISING cx_static_check.
    METHODS parse_enterprise_public_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enterprise_public_key) TYPE zif_ghes221=>enterprise_public_key
      RAISING cx_static_check.
    METHODS parse_ldap_mapping_team
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(ldap_mapping_team) TYPE zif_ghes221=>ldap_mapping_team
      RAISING cx_static_check.
    METHODS parse_ldap_mapping_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(ldap_mapping_user) TYPE zif_ghes221=>ldap_mapping_user
      RAISING cx_static_check.
    METHODS parse_organization_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_simple) TYPE zif_ghes221=>organization_simple
      RAISING cx_static_check.
    METHODS parse_pre_receive_environment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pre_receive_environment) TYPE zif_ghes221=>pre_receive_environment
      RAISING cx_static_check.
    METHODS parse_pre_receive_environment_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pre_receive_environment_downlo) TYPE zif_ghes221=>pre_receive_environment_downlo
      RAISING cx_static_check.
    METHODS parse_pre_receive_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pre_receive_hook) TYPE zif_ghes221=>pre_receive_hook
      RAISING cx_static_check.
    METHODS parse_simple_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_user) TYPE zif_ghes221=>simple_user
      RAISING cx_static_check.
    METHODS parse_app_permissions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(app_permissions) TYPE zif_ghes221=>app_permissions
      RAISING cx_static_check.
    METHODS parse_scoped_installation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scoped_installation) TYPE zif_ghes221=>scoped_installation
      RAISING cx_static_check.
    METHODS parse_authorization
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(authorization) TYPE zif_ghes221=>authorization
      RAISING cx_static_check.
    METHODS parse_integration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(integration) TYPE zif_ghes221=>integration
      RAISING cx_static_check.
    METHODS parse_basic_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(basic_error) TYPE zif_ghes221=>basic_error
      RAISING cx_static_check.
    METHODS parse_validation_error_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(validation_error_simple) TYPE zif_ghes221=>validation_error_simple
      RAISING cx_static_check.
    METHODS parse_enterprise
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enterprise) TYPE zif_ghes221=>enterprise
      RAISING cx_static_check.
    METHODS parse_installation_ghes_2
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(installation_ghes_2) TYPE zif_ghes221=>installation_ghes_2
      RAISING cx_static_check.
    METHODS parse_license_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license_simple) TYPE zif_ghes221=>license_simple
      RAISING cx_static_check.
    METHODS parse_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository) TYPE zif_ghes221=>repository
      RAISING cx_static_check.
    METHODS parse_installation_token
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(installation_token) TYPE zif_ghes221=>installation_token
      RAISING cx_static_check.
    METHODS parse_validation_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(validation_error) TYPE zif_ghes221=>validation_error
      RAISING cx_static_check.
    METHODS parse_application_grant
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(application_grant) TYPE zif_ghes221=>application_grant
      RAISING cx_static_check.
    METHODS parse_code_of_conduct
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_of_conduct) TYPE zif_ghes221=>code_of_conduct
      RAISING cx_static_check.
    METHODS parse_content_reference_attach
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_reference_attachment) TYPE zif_ghes221=>content_reference_attachment
      RAISING cx_static_check.
    METHODS parse_license_info
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license_info) TYPE zif_ghes221=>license_info
      RAISING cx_static_check.
    METHODS parse_enterprise_overview
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enterprise_overview) TYPE zif_ghes221=>enterprise_overview
      RAISING cx_static_check.
    METHODS parse_actor
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actor) TYPE zif_ghes221=>actor
      RAISING cx_static_check.
    METHODS parse_label
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(label) TYPE zif_ghes221=>label
      RAISING cx_static_check.
    METHODS parse_milestone
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(milestone) TYPE zif_ghes221=>milestone
      RAISING cx_static_check.
    METHODS parse_author_association
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(author_association) TYPE zif_ghes221=>author_association
      RAISING cx_static_check.
    METHODS parse_issue_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_simple) TYPE zif_ghes221=>issue_simple
      RAISING cx_static_check.
    METHODS parse_reaction_rollup
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(reaction_rollup) TYPE zif_ghes221=>reaction_rollup
      RAISING cx_static_check.
    METHODS parse_issue_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_comment) TYPE zif_ghes221=>issue_comment
      RAISING cx_static_check.
    METHODS parse_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(event) TYPE zif_ghes221=>event
      RAISING cx_static_check.
    METHODS parse_link_with_type
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(link_with_type) TYPE zif_ghes221=>link_with_type
      RAISING cx_static_check.
    METHODS parse_feed
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(feed) TYPE zif_ghes221=>feed
      RAISING cx_static_check.
    METHODS parse_base_gist
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(base_gist) TYPE zif_ghes221=>base_gist
      RAISING cx_static_check.
    METHODS parse_gist_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_simple) TYPE zif_ghes221=>gist_simple
      RAISING cx_static_check.
    METHODS parse_gist_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_comment) TYPE zif_ghes221=>gist_comment
      RAISING cx_static_check.
    METHODS parse_gist_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_commit) TYPE zif_ghes221=>gist_commit
      RAISING cx_static_check.
    METHODS parse_gitignore_template
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gitignore_template) TYPE zif_ghes221=>gitignore_template
      RAISING cx_static_check.
    METHODS parse_issue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue) TYPE zif_ghes221=>issue
      RAISING cx_static_check.
    METHODS parse_license
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license) TYPE zif_ghes221=>license
      RAISING cx_static_check.
    METHODS parse_api_overview
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(api_overview) TYPE zif_ghes221=>api_overview
      RAISING cx_static_check.
    METHODS parse_minimal_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(minimal_repository) TYPE zif_ghes221=>minimal_repository
      RAISING cx_static_check.
    METHODS parse_thread
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(thread) TYPE zif_ghes221=>thread
      RAISING cx_static_check.
    METHODS parse_thread_subscription
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(thread_subscription) TYPE zif_ghes221=>thread_subscription
      RAISING cx_static_check.
    METHODS parse_organization_full
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_full) TYPE zif_ghes221=>organization_full
      RAISING cx_static_check.
    METHODS parse_org_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(org_hook) TYPE zif_ghes221=>org_hook
      RAISING cx_static_check.
    METHODS parse_webhook_config_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_url) TYPE zif_ghes221=>webhook_config_url
      RAISING cx_static_check.
    METHODS parse_webhook_config_content_t
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_content_type) TYPE zif_ghes221=>webhook_config_content_type
      RAISING cx_static_check.
    METHODS parse_webhook_config_secret
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_secret) TYPE zif_ghes221=>webhook_config_secret
      RAISING cx_static_check.
    METHODS parse_webhook_config_insecure_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_insecure_ssl) TYPE zif_ghes221=>webhook_config_insecure_ssl
      RAISING cx_static_check.
    METHODS parse_org_membership
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(org_membership) TYPE zif_ghes221=>org_membership
      RAISING cx_static_check.
    METHODS parse_org_pre_receive_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(org_pre_receive_hook) TYPE zif_ghes221=>org_pre_receive_hook
      RAISING cx_static_check.
    METHODS parse_project
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project) TYPE zif_ghes221=>project
      RAISING cx_static_check.
    METHODS parse_team_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_simple) TYPE zif_ghes221=>team_simple
      RAISING cx_static_check.
    METHODS parse_team
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team) TYPE zif_ghes221=>team
      RAISING cx_static_check.
    METHODS parse_team_full
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_full) TYPE zif_ghes221=>team_full
      RAISING cx_static_check.
    METHODS parse_team_discussion
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_discussion) TYPE zif_ghes221=>team_discussion
      RAISING cx_static_check.
    METHODS parse_team_discussion_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_discussion_comment) TYPE zif_ghes221=>team_discussion_comment
      RAISING cx_static_check.
    METHODS parse_reaction
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(reaction) TYPE zif_ghes221=>reaction
      RAISING cx_static_check.
    METHODS parse_team_membership
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_membership) TYPE zif_ghes221=>team_membership
      RAISING cx_static_check.
    METHODS parse_team_project
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_project) TYPE zif_ghes221=>team_project
      RAISING cx_static_check.
    METHODS parse_team_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_repository) TYPE zif_ghes221=>team_repository
      RAISING cx_static_check.
    METHODS parse_project_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project_card) TYPE zif_ghes221=>project_card
      RAISING cx_static_check.
    METHODS parse_project_column
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project_column) TYPE zif_ghes221=>project_column
      RAISING cx_static_check.
    METHODS parse_repository_collaborator_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_collaborator_permis) TYPE zif_ghes221=>repository_collaborator_permis
      RAISING cx_static_check.
    METHODS parse_rate_limit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(rate_limit) TYPE zif_ghes221=>rate_limit
      RAISING cx_static_check.
    METHODS parse_rate_limit_overview
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(rate_limit_overview) TYPE zif_ghes221=>rate_limit_overview
      RAISING cx_static_check.
    METHODS parse_full_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(full_repository) TYPE zif_ghes221=>full_repository
      RAISING cx_static_check.
    METHODS parse_protected_branch_admin_e
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch_admin_enforce) TYPE zif_ghes221=>protected_branch_admin_enforce
      RAISING cx_static_check.
    METHODS parse_protected_branch_pull_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch_pull_request_) TYPE zif_ghes221=>protected_branch_pull_request_
      RAISING cx_static_check.
    METHODS parse_branch_restriction_polic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_restriction_policy) TYPE zif_ghes221=>branch_restriction_policy
      RAISING cx_static_check.
    METHODS parse_branch_protection
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_protection) TYPE zif_ghes221=>branch_protection
      RAISING cx_static_check.
    METHODS parse_short_branch
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(short_branch) TYPE zif_ghes221=>short_branch
      RAISING cx_static_check.
    METHODS parse_git_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_user) TYPE zif_ghes221=>git_user
      RAISING cx_static_check.
    METHODS parse_verification
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(verification) TYPE zif_ghes221=>verification
      RAISING cx_static_check.
    METHODS parse_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit) TYPE zif_ghes221=>commit
      RAISING cx_static_check.
    METHODS parse_branch_with_protection
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_with_protection) TYPE zif_ghes221=>branch_with_protection
      RAISING cx_static_check.
    METHODS parse_status_check_policy
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(status_check_policy) TYPE zif_ghes221=>status_check_policy
      RAISING cx_static_check.
    METHODS parse_protected_branch
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch) TYPE zif_ghes221=>protected_branch
      RAISING cx_static_check.
    METHODS parse_pull_request_minimal
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_minimal) TYPE zif_ghes221=>pull_request_minimal
      RAISING cx_static_check.
    METHODS parse_check_run
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_run) TYPE zif_ghes221=>check_run
      RAISING cx_static_check.
    METHODS parse_check_annotation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_annotation) TYPE zif_ghes221=>check_annotation
      RAISING cx_static_check.
    METHODS parse_simple_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_commit) TYPE zif_ghes221=>simple_commit
      RAISING cx_static_check.
    METHODS parse_check_suite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_suite) TYPE zif_ghes221=>check_suite
      RAISING cx_static_check.
    METHODS parse_check_suite_preference
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_suite_preference) TYPE zif_ghes221=>check_suite_preference
      RAISING cx_static_check.
    METHODS parse_collaborator
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(collaborator) TYPE zif_ghes221=>collaborator
      RAISING cx_static_check.
    METHODS parse_repository_invitation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_invitation) TYPE zif_ghes221=>repository_invitation
      RAISING cx_static_check.
    METHODS parse_commit_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_comment) TYPE zif_ghes221=>commit_comment
      RAISING cx_static_check.
    METHODS parse_scim_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_error) TYPE zif_ghes221=>scim_error
      RAISING cx_static_check.
    METHODS parse_branch_short
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_short) TYPE zif_ghes221=>branch_short
      RAISING cx_static_check.
    METHODS parse_link
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(link) TYPE zif_ghes221=>link
      RAISING cx_static_check.
    METHODS parse_pull_request_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_simple) TYPE zif_ghes221=>pull_request_simple
      RAISING cx_static_check.
    METHODS parse_simple_commit_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_commit_status) TYPE zif_ghes221=>simple_commit_status
      RAISING cx_static_check.
    METHODS parse_combined_commit_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(combined_commit_status) TYPE zif_ghes221=>combined_commit_status
      RAISING cx_static_check.
    METHODS parse_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(status) TYPE zif_ghes221=>status
      RAISING cx_static_check.
    METHODS parse_diff_entry
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(diff_entry) TYPE zif_ghes221=>diff_entry
      RAISING cx_static_check.
    METHODS parse_commit_comparison
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_comparison) TYPE zif_ghes221=>commit_comparison
      RAISING cx_static_check.
    METHODS parse_content_tree
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_tree) TYPE zif_ghes221=>content_tree
      RAISING cx_static_check.
    METHODS parse_content_directory
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_directory) TYPE zif_ghes221=>content_directory
      RAISING cx_static_check.
    METHODS parse_content_file
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_file) TYPE zif_ghes221=>content_file
      RAISING cx_static_check.
    METHODS parse_content_symlink
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_symlink) TYPE zif_ghes221=>content_symlink
      RAISING cx_static_check.
    METHODS parse_content_submodule
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_submodule) TYPE zif_ghes221=>content_submodule
      RAISING cx_static_check.
    METHODS parse_file_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(file_commit) TYPE zif_ghes221=>file_commit
      RAISING cx_static_check.
    METHODS parse_contributor
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(contributor) TYPE zif_ghes221=>contributor
      RAISING cx_static_check.
    METHODS parse_deployment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment) TYPE zif_ghes221=>deployment
      RAISING cx_static_check.
    METHODS parse_deployment_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment_status) TYPE zif_ghes221=>deployment_status
      RAISING cx_static_check.
    METHODS parse_short_blob
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(short_blob) TYPE zif_ghes221=>short_blob
      RAISING cx_static_check.
    METHODS parse_blob
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(blob) TYPE zif_ghes221=>blob
      RAISING cx_static_check.
    METHODS parse_git_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_commit) TYPE zif_ghes221=>git_commit
      RAISING cx_static_check.
    METHODS parse_git_ref
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_ref) TYPE zif_ghes221=>git_ref
      RAISING cx_static_check.
    METHODS parse_git_tag
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_tag) TYPE zif_ghes221=>git_tag
      RAISING cx_static_check.
    METHODS parse_git_tree
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_tree) TYPE zif_ghes221=>git_tree
      RAISING cx_static_check.
    METHODS parse_hook_response
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hook_response) TYPE zif_ghes221=>hook_response
      RAISING cx_static_check.
    METHODS parse_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hook) TYPE zif_ghes221=>hook
      RAISING cx_static_check.
    METHODS parse_issue_event_label
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_label) TYPE zif_ghes221=>issue_event_label
      RAISING cx_static_check.
    METHODS parse_issue_event_dismissed_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_dismissed_review) TYPE zif_ghes221=>issue_event_dismissed_review
      RAISING cx_static_check.
    METHODS parse_issue_event_milestone
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_milestone) TYPE zif_ghes221=>issue_event_milestone
      RAISING cx_static_check.
    METHODS parse_issue_event_project_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_project_card) TYPE zif_ghes221=>issue_event_project_card
      RAISING cx_static_check.
    METHODS parse_issue_event_rename
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_rename) TYPE zif_ghes221=>issue_event_rename
      RAISING cx_static_check.
    METHODS parse_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event) TYPE zif_ghes221=>issue_event
      RAISING cx_static_check.
    METHODS parse_issue_event_for_issue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_for_issue) TYPE zif_ghes221=>issue_event_for_issue
      RAISING cx_static_check.
    METHODS parse_deploy_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deploy_key) TYPE zif_ghes221=>deploy_key
      RAISING cx_static_check.
    METHODS parse_language
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(language) TYPE zif_ghes221=>language
      RAISING cx_static_check.
    METHODS parse_license_content
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license_content) TYPE zif_ghes221=>license_content
      RAISING cx_static_check.
    METHODS parse_pages_source_hash
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pages_source_hash) TYPE zif_ghes221=>pages_source_hash
      RAISING cx_static_check.
    METHODS parse_page
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page) TYPE zif_ghes221=>page
      RAISING cx_static_check.
    METHODS parse_page_build
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page_build) TYPE zif_ghes221=>page_build
      RAISING cx_static_check.
    METHODS parse_page_build_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page_build_status) TYPE zif_ghes221=>page_build_status
      RAISING cx_static_check.
    METHODS parse_repository_pre_receive_h
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_pre_receive_hook) TYPE zif_ghes221=>repository_pre_receive_hook
      RAISING cx_static_check.
    METHODS parse_pull_request
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request) TYPE zif_ghes221=>pull_request
      RAISING cx_static_check.
    METHODS parse_pull_request_review_comm
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review_comment) TYPE zif_ghes221=>pull_request_review_comment
      RAISING cx_static_check.
    METHODS parse_pull_request_merge_resul
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_merge_result) TYPE zif_ghes221=>pull_request_merge_result
      RAISING cx_static_check.
    METHODS parse_pull_request_review_requ
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review_request) TYPE zif_ghes221=>pull_request_review_request
      RAISING cx_static_check.
    METHODS parse_pull_request_review
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review) TYPE zif_ghes221=>pull_request_review
      RAISING cx_static_check.
    METHODS parse_review_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(review_comment) TYPE zif_ghes221=>review_comment
      RAISING cx_static_check.
    METHODS parse_release_asset
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(release_asset) TYPE zif_ghes221=>release_asset
      RAISING cx_static_check.
    METHODS parse_release
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(release) TYPE zif_ghes221=>release
      RAISING cx_static_check.
    METHODS parse_stargazer
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(stargazer) TYPE zif_ghes221=>stargazer
      RAISING cx_static_check.
    METHODS parse_code_frequency_stat
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_frequency_stat) TYPE zif_ghes221=>code_frequency_stat
      RAISING cx_static_check.
    METHODS parse_commit_activity
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_activity) TYPE zif_ghes221=>commit_activity
      RAISING cx_static_check.
    METHODS parse_contributor_activity
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(contributor_activity) TYPE zif_ghes221=>contributor_activity
      RAISING cx_static_check.
    METHODS parse_participation_stats
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(participation_stats) TYPE zif_ghes221=>participation_stats
      RAISING cx_static_check.
    METHODS parse_repository_subscription
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_subscription) TYPE zif_ghes221=>repository_subscription
      RAISING cx_static_check.
    METHODS parse_tag
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(tag) TYPE zif_ghes221=>tag
      RAISING cx_static_check.
    METHODS parse_topic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(topic) TYPE zif_ghes221=>topic
      RAISING cx_static_check.
    METHODS parse_search_result_text_match
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(search_result_text_matches) TYPE zif_ghes221=>search_result_text_matches
      RAISING cx_static_check.
    METHODS parse_code_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_search_result_item) TYPE zif_ghes221=>code_search_result_item
      RAISING cx_static_check.
    METHODS parse_commit_search_result_ite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_search_result_item) TYPE zif_ghes221=>commit_search_result_item
      RAISING cx_static_check.
    METHODS parse_issue_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_search_result_item) TYPE zif_ghes221=>issue_search_result_item
      RAISING cx_static_check.
    METHODS parse_label_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(label_search_result_item) TYPE zif_ghes221=>label_search_result_item
      RAISING cx_static_check.
    METHODS parse_repo_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repo_search_result_item) TYPE zif_ghes221=>repo_search_result_item
      RAISING cx_static_check.
    METHODS parse_topic_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(topic_search_result_item) TYPE zif_ghes221=>topic_search_result_item
      RAISING cx_static_check.
    METHODS parse_user_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(user_search_result_item) TYPE zif_ghes221=>user_search_result_item
      RAISING cx_static_check.
    METHODS parse_configuration_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(configuration_status) TYPE zif_ghes221=>configuration_status
      RAISING cx_static_check.
    METHODS parse_maintenance_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(maintenance_status) TYPE zif_ghes221=>maintenance_status
      RAISING cx_static_check.
    METHODS parse_enterprise_settings
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enterprise_settings) TYPE zif_ghes221=>enterprise_settings
      RAISING cx_static_check.
    METHODS parse_ssh_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(ssh_key) TYPE zif_ghes221=>ssh_key
      RAISING cx_static_check.
    METHODS parse_private_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(private_user) TYPE zif_ghes221=>private_user
      RAISING cx_static_check.
    METHODS parse_public_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(public_user) TYPE zif_ghes221=>public_user
      RAISING cx_static_check.
    METHODS parse_email
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(email) TYPE zif_ghes221=>email
      RAISING cx_static_check.
    METHODS parse_gpg_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gpg_key) TYPE zif_ghes221=>gpg_key
      RAISING cx_static_check.
    METHODS parse_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(key) TYPE zif_ghes221=>key
      RAISING cx_static_check.
    METHODS parse_starred_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(starred_repository) TYPE zif_ghes221=>starred_repository
      RAISING cx_static_check.
    METHODS parse_hovercard
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hovercard) TYPE zif_ghes221=>hovercard
      RAISING cx_static_check.
    METHODS parse_key_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(key_simple) TYPE zif_ghes221=>key_simple
      RAISING cx_static_check.
ENDCLASS.

CLASS zcl_ghes221 IMPLEMENTATION.
  METHOD constructor.
    mi_client = ii_client.
  ENDMETHOD.

  METHOD send_receive.
    mi_client->send( ).
    mi_client->receive( ).
    mi_client->response->get_status( IMPORTING code = rv_code ).
  ENDMETHOD.

  METHOD parse_global_hook.
    global_hook-type = mo_json->value_string( iv_prefix && '/type' ).
    global_hook-id = mo_json->value_string( iv_prefix && '/id' ).
    global_hook-name = mo_json->value_string( iv_prefix && '/name' ).
    global_hook-active = mo_json->value_boolean( iv_prefix && '/active' ).
* todo, object, events, array
* todo, object, config, object
    global_hook-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    global_hook-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    global_hook-url = mo_json->value_string( iv_prefix && '/url' ).
    global_hook-ping_url = mo_json->value_string( iv_prefix && '/ping_url' ).
  ENDMETHOD.

  METHOD parse_global_hook_2.
    global_hook_2-type = mo_json->value_string( iv_prefix && '/type' ).
    global_hook_2-id = mo_json->value_string( iv_prefix && '/id' ).
    global_hook_2-name = mo_json->value_string( iv_prefix && '/name' ).
    global_hook_2-active = mo_json->value_boolean( iv_prefix && '/active' ).
* todo, object, events, array
* todo, object, config, object
    global_hook_2-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    global_hook_2-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    global_hook_2-url = mo_json->value_string( iv_prefix && '/url' ).
    global_hook_2-ping_url = mo_json->value_string( iv_prefix && '/ping_url' ).
  ENDMETHOD.

  METHOD parse_enterprise_public_key.
    enterprise_public_key-id = mo_json->value_string( iv_prefix && '/id' ).
    enterprise_public_key-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    enterprise_public_key-key = mo_json->value_string( iv_prefix && '/key' ).
    enterprise_public_key-user_id = mo_json->value_string( iv_prefix && '/user_id' ).
    enterprise_public_key-repository_id = mo_json->value_string( iv_prefix && '/repository_id' ).
    enterprise_public_key-url = mo_json->value_string( iv_prefix && '/url' ).
  ENDMETHOD.

  METHOD parse_ldap_mapping_team.
    ldap_mapping_team-ldap_dn = mo_json->value_string( iv_prefix && '/ldap_dn' ).
    ldap_mapping_team-id = mo_json->value_string( iv_prefix && '/id' ).
    ldap_mapping_team-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    ldap_mapping_team-url = mo_json->value_string( iv_prefix && '/url' ).
    ldap_mapping_team-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    ldap_mapping_team-name = mo_json->value_string( iv_prefix && '/name' ).
    ldap_mapping_team-slug = mo_json->value_string( iv_prefix && '/slug' ).
    ldap_mapping_team-description = mo_json->value_string( iv_prefix && '/description' ).
    ldap_mapping_team-privacy = mo_json->value_string( iv_prefix && '/privacy' ).
    ldap_mapping_team-permission = mo_json->value_string( iv_prefix && '/permission' ).
    ldap_mapping_team-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    ldap_mapping_team-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
* todo, object, parent, 
  ENDMETHOD.

  METHOD parse_ldap_mapping_user.
    ldap_mapping_user-ldap_dn = mo_json->value_string( iv_prefix && '/ldap_dn' ).
    ldap_mapping_user-login = mo_json->value_string( iv_prefix && '/login' ).
    ldap_mapping_user-id = mo_json->value_string( iv_prefix && '/id' ).
    ldap_mapping_user-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    ldap_mapping_user-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    ldap_mapping_user-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    ldap_mapping_user-url = mo_json->value_string( iv_prefix && '/url' ).
    ldap_mapping_user-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    ldap_mapping_user-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    ldap_mapping_user-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    ldap_mapping_user-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    ldap_mapping_user-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    ldap_mapping_user-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    ldap_mapping_user-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    ldap_mapping_user-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    ldap_mapping_user-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    ldap_mapping_user-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    ldap_mapping_user-type = mo_json->value_string( iv_prefix && '/type' ).
    ldap_mapping_user-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
  ENDMETHOD.

  METHOD parse_organization_simple.
    organization_simple-login = mo_json->value_string( iv_prefix && '/login' ).
    organization_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    organization_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    organization_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    organization_simple-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    organization_simple-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    organization_simple-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    organization_simple-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    organization_simple-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    organization_simple-public_members_url = mo_json->value_string( iv_prefix && '/public_members_url' ).
    organization_simple-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    organization_simple-description = mo_json->value_string( iv_prefix && '/description' ).
  ENDMETHOD.

  METHOD parse_pre_receive_environment.
    pre_receive_environment-id = mo_json->value_string( iv_prefix && '/id' ).
    pre_receive_environment-name = mo_json->value_string( iv_prefix && '/name' ).
    pre_receive_environment-image_url = mo_json->value_string( iv_prefix && '/image_url' ).
    pre_receive_environment-url = mo_json->value_string( iv_prefix && '/url' ).
    pre_receive_environment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    pre_receive_environment-default_environment = mo_json->value_boolean( iv_prefix && '/default_environment' ).
    pre_receive_environment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    pre_receive_environment-hooks_count = mo_json->value_string( iv_prefix && '/hooks_count' ).
* todo, object, download, object
  ENDMETHOD.

  METHOD parse_pre_receive_environment_.
    pre_receive_environment_downlo-url = mo_json->value_string( iv_prefix && '/url' ).
    pre_receive_environment_downlo-state = mo_json->value_string( iv_prefix && '/state' ).
    pre_receive_environment_downlo-downloaded_at = mo_json->value_string( iv_prefix && '/downloaded_at' ).
    pre_receive_environment_downlo-message = mo_json->value_string( iv_prefix && '/message' ).
  ENDMETHOD.

  METHOD parse_pre_receive_hook.
    pre_receive_hook-id = mo_json->value_string( iv_prefix && '/id' ).
    pre_receive_hook-name = mo_json->value_string( iv_prefix && '/name' ).
    pre_receive_hook-enforcement = mo_json->value_string( iv_prefix && '/enforcement' ).
    pre_receive_hook-script = mo_json->value_string( iv_prefix && '/script' ).
* todo, object, script_repository, object
* todo, object, environment, object
    pre_receive_hook-allow_downstream_configuration = mo_json->value_boolean( iv_prefix && '/allow_downstream_configuration' ).
  ENDMETHOD.

  METHOD parse_simple_user.
    simple_user-login = mo_json->value_string( iv_prefix && '/login' ).
    simple_user-id = mo_json->value_string( iv_prefix && '/id' ).
    simple_user-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    simple_user-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    simple_user-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    simple_user-url = mo_json->value_string( iv_prefix && '/url' ).
    simple_user-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    simple_user-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    simple_user-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    simple_user-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    simple_user-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    simple_user-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    simple_user-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    simple_user-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    simple_user-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    simple_user-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    simple_user-type = mo_json->value_string( iv_prefix && '/type' ).
    simple_user-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    simple_user-starred_at = mo_json->value_string( iv_prefix && '/starred_at' ).
  ENDMETHOD.

  METHOD parse_app_permissions.
    app_permissions-actions = mo_json->value_string( iv_prefix && '/actions' ).
    app_permissions-administration = mo_json->value_string( iv_prefix && '/administration' ).
    app_permissions-checks = mo_json->value_string( iv_prefix && '/checks' ).
    app_permissions-content_references = mo_json->value_string( iv_prefix && '/content_references' ).
    app_permissions-contents = mo_json->value_string( iv_prefix && '/contents' ).
    app_permissions-deployments = mo_json->value_string( iv_prefix && '/deployments' ).
    app_permissions-environments = mo_json->value_string( iv_prefix && '/environments' ).
    app_permissions-issues = mo_json->value_string( iv_prefix && '/issues' ).
    app_permissions-metadata = mo_json->value_string( iv_prefix && '/metadata' ).
    app_permissions-packages = mo_json->value_string( iv_prefix && '/packages' ).
    app_permissions-pages = mo_json->value_string( iv_prefix && '/pages' ).
    app_permissions-pull_requests = mo_json->value_string( iv_prefix && '/pull_requests' ).
    app_permissions-repository_hooks = mo_json->value_string( iv_prefix && '/repository_hooks' ).
    app_permissions-repository_projects = mo_json->value_string( iv_prefix && '/repository_projects' ).
    app_permissions-secret_scanning_alerts = mo_json->value_string( iv_prefix && '/secret_scanning_alerts' ).
    app_permissions-secrets = mo_json->value_string( iv_prefix && '/secrets' ).
    app_permissions-security_events = mo_json->value_string( iv_prefix && '/security_events' ).
    app_permissions-single_file = mo_json->value_string( iv_prefix && '/single_file' ).
    app_permissions-statuses = mo_json->value_string( iv_prefix && '/statuses' ).
    app_permissions-vulnerability_alerts = mo_json->value_string( iv_prefix && '/vulnerability_alerts' ).
    app_permissions-workflows = mo_json->value_string( iv_prefix && '/workflows' ).
    app_permissions-members = mo_json->value_string( iv_prefix && '/members' ).
    app_permissions-organization_administration = mo_json->value_string( iv_prefix && '/organization_administration' ).
    app_permissions-organization_hooks = mo_json->value_string( iv_prefix && '/organization_hooks' ).
    app_permissions-organization_plan = mo_json->value_string( iv_prefix && '/organization_plan' ).
    app_permissions-organization_projects = mo_json->value_string( iv_prefix && '/organization_projects' ).
    app_permissions-organization_secrets = mo_json->value_string( iv_prefix && '/organization_secrets' ).
    app_permissions-organization_self_hosted_runne = mo_json->value_string( iv_prefix && '/organization_self_hosted_runners' ).
    app_permissions-organization_user_blocking = mo_json->value_string( iv_prefix && '/organization_user_blocking' ).
    app_permissions-team_discussions = mo_json->value_string( iv_prefix && '/team_discussions' ).
  ENDMETHOD.

  METHOD parse_scoped_installation.
* todo, object, permissions, 
    scoped_installation-repository_selection = mo_json->value_string( iv_prefix && '/repository_selection' ).
    scoped_installation-single_file_name = mo_json->value_string( iv_prefix && '/single_file_name' ).
    scoped_installation-has_multiple_single_files = mo_json->value_boolean( iv_prefix && '/has_multiple_single_files' ).
* todo, object, single_file_paths, array
    scoped_installation-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
* todo, object, account, 
  ENDMETHOD.

  METHOD parse_authorization.
    authorization-id = mo_json->value_string( iv_prefix && '/id' ).
    authorization-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, scopes, array
    authorization-token = mo_json->value_string( iv_prefix && '/token' ).
    authorization-token_last_eight = mo_json->value_string( iv_prefix && '/token_last_eight' ).
    authorization-hashed_token = mo_json->value_string( iv_prefix && '/hashed_token' ).
* todo, object, app, object
    authorization-note = mo_json->value_string( iv_prefix && '/note' ).
    authorization-note_url = mo_json->value_string( iv_prefix && '/note_url' ).
    authorization-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    authorization-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    authorization-fingerprint = mo_json->value_string( iv_prefix && '/fingerprint' ).
* todo, object, user, 
* todo, object, installation, 
  ENDMETHOD.

  METHOD parse_integration.
    integration-id = mo_json->value_string( iv_prefix && '/id' ).
    integration-slug = mo_json->value_string( iv_prefix && '/slug' ).
    integration-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
* todo, object, owner, 
    integration-name = mo_json->value_string( iv_prefix && '/name' ).
    integration-description = mo_json->value_string( iv_prefix && '/description' ).
    integration-external_url = mo_json->value_string( iv_prefix && '/external_url' ).
    integration-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    integration-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    integration-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, permissions, object
* todo, object, events, array
    integration-installations_count = mo_json->value_string( iv_prefix && '/installations_count' ).
    integration-client_id = mo_json->value_string( iv_prefix && '/client_id' ).
    integration-client_secret = mo_json->value_string( iv_prefix && '/client_secret' ).
    integration-webhook_secret = mo_json->value_string( iv_prefix && '/webhook_secret' ).
    integration-pem = mo_json->value_string( iv_prefix && '/pem' ).
  ENDMETHOD.

  METHOD parse_basic_error.
    basic_error-message = mo_json->value_string( iv_prefix && '/message' ).
    basic_error-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
  ENDMETHOD.

  METHOD parse_validation_error_simple.
    validation_error_simple-message = mo_json->value_string( iv_prefix && '/message' ).
    validation_error_simple-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
* todo, object, errors, array
  ENDMETHOD.

  METHOD parse_enterprise.
    enterprise-description = mo_json->value_string( iv_prefix && '/description' ).
    enterprise-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    enterprise-website_url = mo_json->value_string( iv_prefix && '/website_url' ).
    enterprise-id = mo_json->value_string( iv_prefix && '/id' ).
    enterprise-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    enterprise-name = mo_json->value_string( iv_prefix && '/name' ).
    enterprise-slug = mo_json->value_string( iv_prefix && '/slug' ).
    enterprise-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    enterprise-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    enterprise-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
  ENDMETHOD.

  METHOD parse_installation_ghes_2.
    installation_ghes_2-id = mo_json->value_string( iv_prefix && '/id' ).
* todo, object, account, 
    installation_ghes_2-repository_selection = mo_json->value_string( iv_prefix && '/repository_selection' ).
    installation_ghes_2-access_tokens_url = mo_json->value_string( iv_prefix && '/access_tokens_url' ).
    installation_ghes_2-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
    installation_ghes_2-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    installation_ghes_2-app_id = mo_json->value_string( iv_prefix && '/app_id' ).
    installation_ghes_2-target_id = mo_json->value_string( iv_prefix && '/target_id' ).
    installation_ghes_2-target_type = mo_json->value_string( iv_prefix && '/target_type' ).
* todo, object, permissions, object
* todo, object, events, array
    installation_ghes_2-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    installation_ghes_2-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    installation_ghes_2-single_file_name = mo_json->value_string( iv_prefix && '/single_file_name' ).
    installation_ghes_2-app_slug = mo_json->value_string( iv_prefix && '/app_slug' ).
* todo, object, suspended_by, 
    installation_ghes_2-suspended_at = mo_json->value_string( iv_prefix && '/suspended_at' ).
    installation_ghes_2-contact_email = mo_json->value_string( iv_prefix && '/contact_email' ).
  ENDMETHOD.

  METHOD parse_license_simple.
    license_simple-key = mo_json->value_string( iv_prefix && '/key' ).
    license_simple-name = mo_json->value_string( iv_prefix && '/name' ).
    license_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    license_simple-spdx_id = mo_json->value_string( iv_prefix && '/spdx_id' ).
    license_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    license_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_repository.
    repository-id = mo_json->value_string( iv_prefix && '/id' ).
    repository-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    repository-name = mo_json->value_string( iv_prefix && '/name' ).
    repository-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
* todo, object, license, 
    repository-forks = mo_json->value_string( iv_prefix && '/forks' ).
* todo, object, permissions, object
* todo, object, owner, 
    repository-private = mo_json->value_boolean( iv_prefix && '/private' ).
    repository-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    repository-description = mo_json->value_string( iv_prefix && '/description' ).
    repository-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    repository-url = mo_json->value_string( iv_prefix && '/url' ).
    repository-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    repository-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    repository-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    repository-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    repository-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    repository-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    repository-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    repository-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    repository-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    repository-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    repository-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    repository-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    repository-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    repository-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    repository-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    repository-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    repository-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    repository-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    repository-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    repository-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    repository-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    repository-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    repository-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    repository-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    repository-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    repository-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    repository-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    repository-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    repository-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    repository-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    repository-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    repository-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    repository-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    repository-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    repository-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    repository-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    repository-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    repository-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    repository-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    repository-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    repository-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    repository-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    repository-language = mo_json->value_string( iv_prefix && '/language' ).
    repository-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    repository-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    repository-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    repository-size = mo_json->value_string( iv_prefix && '/size' ).
    repository-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    repository-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    repository-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
* todo, object, topics, array
    repository-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    repository-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    repository-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    repository-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    repository-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    repository-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    repository-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    repository-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    repository-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    repository-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    repository-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    repository-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/allow_rebase_merge' ).
* todo, object, template_repository, object
    repository-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/allow_squash_merge' ).
    repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    repository-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/allow_merge_commit' ).
    repository-subscribers_count = mo_json->value_string( iv_prefix && '/subscribers_count' ).
    repository-network_count = mo_json->value_string( iv_prefix && '/network_count' ).
    repository-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    repository-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
    repository-master_branch = mo_json->value_string( iv_prefix && '/master_branch' ).
    repository-starred_at = mo_json->value_string( iv_prefix && '/starred_at' ).
    repository-anonymous_access_enabled = mo_json->value_boolean( iv_prefix && '/anonymous_access_enabled' ).
  ENDMETHOD.

  METHOD parse_installation_token.
    installation_token-token = mo_json->value_string( iv_prefix && '/token' ).
    installation_token-expires_at = mo_json->value_string( iv_prefix && '/expires_at' ).
* todo, object, permissions, object
    installation_token-repository_selection = mo_json->value_string( iv_prefix && '/repository_selection' ).
* todo, object, repositories, array
    installation_token-single_file = mo_json->value_string( iv_prefix && '/single_file' ).
    installation_token-has_multiple_single_files = mo_json->value_boolean( iv_prefix && '/has_multiple_single_files' ).
* todo, object, single_file_paths, array
  ENDMETHOD.

  METHOD parse_validation_error.
    validation_error-message = mo_json->value_string( iv_prefix && '/message' ).
    validation_error-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
* todo, object, errors, array
  ENDMETHOD.

  METHOD parse_application_grant.
    application_grant-id = mo_json->value_string( iv_prefix && '/id' ).
    application_grant-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, app, object
    application_grant-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    application_grant-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, scopes, array
* todo, object, user, 
  ENDMETHOD.

  METHOD parse_code_of_conduct.
    code_of_conduct-key = mo_json->value_string( iv_prefix && '/key' ).
    code_of_conduct-name = mo_json->value_string( iv_prefix && '/name' ).
    code_of_conduct-url = mo_json->value_string( iv_prefix && '/url' ).
    code_of_conduct-body = mo_json->value_string( iv_prefix && '/body' ).
    code_of_conduct-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_content_reference_attach.
    content_reference_attachment-id = mo_json->value_string( iv_prefix && '/id' ).
    content_reference_attachment-title = mo_json->value_string( iv_prefix && '/title' ).
    content_reference_attachment-body = mo_json->value_string( iv_prefix && '/body' ).
    content_reference_attachment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
  ENDMETHOD.

  METHOD parse_license_info.
    license_info-seats = mo_json->value_string( iv_prefix && '/seats' ).
    license_info-seats_used = mo_json->value_string( iv_prefix && '/seats_used' ).
    license_info-seats_available = mo_json->value_string( iv_prefix && '/seats_available' ).
    license_info-kind = mo_json->value_string( iv_prefix && '/kind' ).
    license_info-days_until_expiration = mo_json->value_string( iv_prefix && '/days_until_expiration' ).
    license_info-expire_at = mo_json->value_string( iv_prefix && '/expire_at' ).
  ENDMETHOD.

  METHOD parse_enterprise_overview.
* todo, object, repos, object
* todo, object, hooks, object
* todo, object, pages, object
* todo, object, orgs, object
* todo, object, users, object
* todo, object, pulls, object
* todo, object, issues, object
* todo, object, milestones, object
* todo, object, gists, object
* todo, object, comments, object
  ENDMETHOD.

  METHOD parse_actor.
    actor-id = mo_json->value_string( iv_prefix && '/id' ).
    actor-login = mo_json->value_string( iv_prefix && '/login' ).
    actor-display_login = mo_json->value_string( iv_prefix && '/display_login' ).
    actor-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    actor-url = mo_json->value_string( iv_prefix && '/url' ).
    actor-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
  ENDMETHOD.

  METHOD parse_label.
    label-id = mo_json->value_string( iv_prefix && '/id' ).
    label-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    label-url = mo_json->value_string( iv_prefix && '/url' ).
    label-name = mo_json->value_string( iv_prefix && '/name' ).
    label-description = mo_json->value_string( iv_prefix && '/description' ).
    label-color = mo_json->value_string( iv_prefix && '/color' ).
    label-default = mo_json->value_boolean( iv_prefix && '/default' ).
  ENDMETHOD.

  METHOD parse_milestone.
    milestone-url = mo_json->value_string( iv_prefix && '/url' ).
    milestone-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    milestone-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    milestone-id = mo_json->value_string( iv_prefix && '/id' ).
    milestone-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    milestone-number = mo_json->value_string( iv_prefix && '/number' ).
    milestone-state = mo_json->value_string( iv_prefix && '/state' ).
    milestone-title = mo_json->value_string( iv_prefix && '/title' ).
    milestone-description = mo_json->value_string( iv_prefix && '/description' ).
* todo, object, creator, 
    milestone-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    milestone-closed_issues = mo_json->value_string( iv_prefix && '/closed_issues' ).
    milestone-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    milestone-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    milestone-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    milestone-due_on = mo_json->value_string( iv_prefix && '/due_on' ).
  ENDMETHOD.

  METHOD parse_author_association.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_issue_simple.
    issue_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    issue_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    issue_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    issue_simple-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    issue_simple-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    issue_simple-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    issue_simple-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    issue_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    issue_simple-number = mo_json->value_string( iv_prefix && '/number' ).
    issue_simple-state = mo_json->value_string( iv_prefix && '/state' ).
    issue_simple-title = mo_json->value_string( iv_prefix && '/title' ).
    issue_simple-body = mo_json->value_string( iv_prefix && '/body' ).
* todo, object, user, 
* todo, object, labels, array
* todo, object, assignee, 
* todo, object, assignees, array
* todo, object, milestone, 
    issue_simple-locked = mo_json->value_boolean( iv_prefix && '/locked' ).
    issue_simple-active_lock_reason = mo_json->value_string( iv_prefix && '/active_lock_reason' ).
    issue_simple-comments = mo_json->value_string( iv_prefix && '/comments' ).
* todo, object, pull_request, object
    issue_simple-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    issue_simple-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    issue_simple-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, author_association, 
    issue_simple-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    issue_simple-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    issue_simple-timeline_url = mo_json->value_string( iv_prefix && '/timeline_url' ).
* todo, object, repository, 
* todo, object, performed_via_github_app, 
  ENDMETHOD.

  METHOD parse_reaction_rollup.
    reaction_rollup-url = mo_json->value_string( iv_prefix && '/url' ).
    reaction_rollup-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
    reaction_rollup-n1 = mo_json->value_string( iv_prefix && '/+1' ).
    reaction_rollup-_1 = mo_json->value_string( iv_prefix && '/-1' ).
    reaction_rollup-laugh = mo_json->value_string( iv_prefix && '/laugh' ).
    reaction_rollup-confused = mo_json->value_string( iv_prefix && '/confused' ).
    reaction_rollup-heart = mo_json->value_string( iv_prefix && '/heart' ).
    reaction_rollup-hooray = mo_json->value_string( iv_prefix && '/hooray' ).
    reaction_rollup-eyes = mo_json->value_string( iv_prefix && '/eyes' ).
    reaction_rollup-rocket = mo_json->value_string( iv_prefix && '/rocket' ).
  ENDMETHOD.

  METHOD parse_issue_comment.
    issue_comment-id = mo_json->value_string( iv_prefix && '/id' ).
    issue_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    issue_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    issue_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    issue_comment-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    issue_comment-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    issue_comment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
* todo, object, user, 
    issue_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    issue_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    issue_comment-issue_url = mo_json->value_string( iv_prefix && '/issue_url' ).
* todo, object, author_association, 
* todo, object, performed_via_github_app, 
* todo, object, reactions, 
  ENDMETHOD.

  METHOD parse_event.
    event-id = mo_json->value_string( iv_prefix && '/id' ).
    event-type = mo_json->value_string( iv_prefix && '/type' ).
* todo, object, actor, 
* todo, object, repo, object
* todo, object, org, 
* todo, object, payload, object
    event-public = mo_json->value_boolean( iv_prefix && '/public' ).
    event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
  ENDMETHOD.

  METHOD parse_link_with_type.
    link_with_type-href = mo_json->value_string( iv_prefix && '/href' ).
    link_with_type-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_feed.
    feed-timeline_url = mo_json->value_string( iv_prefix && '/timeline_url' ).
    feed-user_url = mo_json->value_string( iv_prefix && '/user_url' ).
    feed-current_user_public_url = mo_json->value_string( iv_prefix && '/current_user_public_url' ).
    feed-current_user_url = mo_json->value_string( iv_prefix && '/current_user_url' ).
    feed-current_user_actor_url = mo_json->value_string( iv_prefix && '/current_user_actor_url' ).
    feed-current_user_organization_url = mo_json->value_string( iv_prefix && '/current_user_organization_url' ).
* todo, object, current_user_organization_urls, array
* todo, object, _links, object
  ENDMETHOD.

  METHOD parse_base_gist.
    base_gist-url = mo_json->value_string( iv_prefix && '/url' ).
    base_gist-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    base_gist-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    base_gist-id = mo_json->value_string( iv_prefix && '/id' ).
    base_gist-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    base_gist-git_pull_url = mo_json->value_string( iv_prefix && '/git_pull_url' ).
    base_gist-git_push_url = mo_json->value_string( iv_prefix && '/git_push_url' ).
    base_gist-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
* todo, object, files, object
    base_gist-public = mo_json->value_boolean( iv_prefix && '/public' ).
    base_gist-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    base_gist-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    base_gist-description = mo_json->value_string( iv_prefix && '/description' ).
    base_gist-comments = mo_json->value_string( iv_prefix && '/comments' ).
* todo, object, user, 
    base_gist-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
* todo, object, owner, 
    base_gist-truncated = mo_json->value_boolean( iv_prefix && '/truncated' ).
* todo, object, forks, array
* todo, object, history, array
  ENDMETHOD.

  METHOD parse_gist_simple.
    gist_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    gist_simple-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    gist_simple-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    gist_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    gist_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    gist_simple-git_pull_url = mo_json->value_string( iv_prefix && '/git_pull_url' ).
    gist_simple-git_push_url = mo_json->value_string( iv_prefix && '/git_push_url' ).
    gist_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
* todo, object, files, object
    gist_simple-public = mo_json->value_boolean( iv_prefix && '/public' ).
    gist_simple-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    gist_simple-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    gist_simple-description = mo_json->value_string( iv_prefix && '/description' ).
    gist_simple-comments = mo_json->value_string( iv_prefix && '/comments' ).
    gist_simple-user = mo_json->value_string( iv_prefix && '/user' ).
    gist_simple-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
* todo, object, owner, 
    gist_simple-truncated = mo_json->value_boolean( iv_prefix && '/truncated' ).
  ENDMETHOD.

  METHOD parse_gist_comment.
    gist_comment-id = mo_json->value_string( iv_prefix && '/id' ).
    gist_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    gist_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    gist_comment-body = mo_json->value_string( iv_prefix && '/body' ).
* todo, object, user, 
    gist_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    gist_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, author_association, 
  ENDMETHOD.

  METHOD parse_gist_commit.
    gist_commit-url = mo_json->value_string( iv_prefix && '/url' ).
    gist_commit-version = mo_json->value_string( iv_prefix && '/version' ).
* todo, object, user, 
* todo, object, change_status, object
    gist_commit-committed_at = mo_json->value_string( iv_prefix && '/committed_at' ).
  ENDMETHOD.

  METHOD parse_gitignore_template.
    gitignore_template-name = mo_json->value_string( iv_prefix && '/name' ).
    gitignore_template-source = mo_json->value_string( iv_prefix && '/source' ).
  ENDMETHOD.

  METHOD parse_issue.
    issue-id = mo_json->value_string( iv_prefix && '/id' ).
    issue-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    issue-url = mo_json->value_string( iv_prefix && '/url' ).
    issue-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    issue-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    issue-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    issue-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    issue-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    issue-number = mo_json->value_string( iv_prefix && '/number' ).
    issue-state = mo_json->value_string( iv_prefix && '/state' ).
    issue-title = mo_json->value_string( iv_prefix && '/title' ).
    issue-body = mo_json->value_string( iv_prefix && '/body' ).
* todo, object, user, 
* todo, object, labels, array
* todo, object, assignee, 
* todo, object, assignees, array
* todo, object, milestone, 
    issue-locked = mo_json->value_boolean( iv_prefix && '/locked' ).
    issue-active_lock_reason = mo_json->value_string( iv_prefix && '/active_lock_reason' ).
    issue-comments = mo_json->value_string( iv_prefix && '/comments' ).
* todo, object, pull_request, object
    issue-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    issue-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    issue-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, closed_by, 
    issue-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    issue-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    issue-timeline_url = mo_json->value_string( iv_prefix && '/timeline_url' ).
* todo, object, repository, 
* todo, object, performed_via_github_app, 
* todo, object, author_association, 
* todo, object, reactions, 
  ENDMETHOD.

  METHOD parse_license.
    license-key = mo_json->value_string( iv_prefix && '/key' ).
    license-name = mo_json->value_string( iv_prefix && '/name' ).
    license-spdx_id = mo_json->value_string( iv_prefix && '/spdx_id' ).
    license-url = mo_json->value_string( iv_prefix && '/url' ).
    license-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    license-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    license-description = mo_json->value_string( iv_prefix && '/description' ).
    license-implementation = mo_json->value_string( iv_prefix && '/implementation' ).
* todo, object, permissions, array
* todo, object, conditions, array
* todo, object, limitations, array
    license-body = mo_json->value_string( iv_prefix && '/body' ).
    license-featured = mo_json->value_boolean( iv_prefix && '/featured' ).
  ENDMETHOD.

  METHOD parse_api_overview.
    api_overview-verifiable_password_authentica = mo_json->value_boolean( iv_prefix && '/verifiable_password_authentication' ).
    api_overview-installed_version = mo_json->value_string( iv_prefix && '/installed_version' ).
  ENDMETHOD.

  METHOD parse_minimal_repository.
    minimal_repository-id = mo_json->value_string( iv_prefix && '/id' ).
    minimal_repository-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    minimal_repository-name = mo_json->value_string( iv_prefix && '/name' ).
    minimal_repository-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
* todo, object, owner, object
    minimal_repository-private = mo_json->value_boolean( iv_prefix && '/private' ).
    minimal_repository-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    minimal_repository-description = mo_json->value_string( iv_prefix && '/description' ).
    minimal_repository-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    minimal_repository-url = mo_json->value_string( iv_prefix && '/url' ).
    minimal_repository-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    minimal_repository-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    minimal_repository-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    minimal_repository-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    minimal_repository-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    minimal_repository-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    minimal_repository-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    minimal_repository-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    minimal_repository-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    minimal_repository-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    minimal_repository-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    minimal_repository-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    minimal_repository-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    minimal_repository-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    minimal_repository-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    minimal_repository-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    minimal_repository-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    minimal_repository-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    minimal_repository-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    minimal_repository-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    minimal_repository-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    minimal_repository-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    minimal_repository-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    minimal_repository-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    minimal_repository-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    minimal_repository-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    minimal_repository-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    minimal_repository-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    minimal_repository-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    minimal_repository-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    minimal_repository-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    minimal_repository-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    minimal_repository-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    minimal_repository-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    minimal_repository-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    minimal_repository-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    minimal_repository-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    minimal_repository-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    minimal_repository-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    minimal_repository-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    minimal_repository-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    minimal_repository-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    minimal_repository-language = mo_json->value_string( iv_prefix && '/language' ).
    minimal_repository-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    minimal_repository-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    minimal_repository-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    minimal_repository-size = mo_json->value_string( iv_prefix && '/size' ).
    minimal_repository-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    minimal_repository-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    minimal_repository-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
* todo, object, topics, array
    minimal_repository-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    minimal_repository-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    minimal_repository-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    minimal_repository-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    minimal_repository-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    minimal_repository-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    minimal_repository-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    minimal_repository-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    minimal_repository-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    minimal_repository-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    minimal_repository-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, permissions, object
* todo, object, template_repository, object
    minimal_repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    minimal_repository-subscribers_count = mo_json->value_string( iv_prefix && '/subscribers_count' ).
    minimal_repository-network_count = mo_json->value_string( iv_prefix && '/network_count' ).
* todo, object, license, object
    minimal_repository-forks = mo_json->value_string( iv_prefix && '/forks' ).
    minimal_repository-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    minimal_repository-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
    minimal_repository-anonymous_access_enabled = mo_json->value_boolean( iv_prefix && '/anonymous_access_enabled' ).
  ENDMETHOD.

  METHOD parse_thread.
    thread-id = mo_json->value_string( iv_prefix && '/id' ).
* todo, object, repository, 
* todo, object, subject, object
    thread-reason = mo_json->value_string( iv_prefix && '/reason' ).
    thread-unread = mo_json->value_boolean( iv_prefix && '/unread' ).
    thread-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    thread-last_read_at = mo_json->value_string( iv_prefix && '/last_read_at' ).
    thread-url = mo_json->value_string( iv_prefix && '/url' ).
    thread-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
  ENDMETHOD.

  METHOD parse_thread_subscription.
    thread_subscription-subscribed = mo_json->value_boolean( iv_prefix && '/subscribed' ).
    thread_subscription-ignored = mo_json->value_boolean( iv_prefix && '/ignored' ).
    thread_subscription-reason = mo_json->value_string( iv_prefix && '/reason' ).
    thread_subscription-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    thread_subscription-url = mo_json->value_string( iv_prefix && '/url' ).
    thread_subscription-thread_url = mo_json->value_string( iv_prefix && '/thread_url' ).
    thread_subscription-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
  ENDMETHOD.

  METHOD parse_organization_full.
    organization_full-login = mo_json->value_string( iv_prefix && '/login' ).
    organization_full-id = mo_json->value_string( iv_prefix && '/id' ).
    organization_full-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    organization_full-url = mo_json->value_string( iv_prefix && '/url' ).
    organization_full-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    organization_full-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    organization_full-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    organization_full-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    organization_full-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    organization_full-public_members_url = mo_json->value_string( iv_prefix && '/public_members_url' ).
    organization_full-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    organization_full-description = mo_json->value_string( iv_prefix && '/description' ).
    organization_full-name = mo_json->value_string( iv_prefix && '/name' ).
    organization_full-company = mo_json->value_string( iv_prefix && '/company' ).
    organization_full-blog = mo_json->value_string( iv_prefix && '/blog' ).
    organization_full-location = mo_json->value_string( iv_prefix && '/location' ).
    organization_full-email = mo_json->value_string( iv_prefix && '/email' ).
    organization_full-has_organization_projects = mo_json->value_boolean( iv_prefix && '/has_organization_projects' ).
    organization_full-has_repository_projects = mo_json->value_boolean( iv_prefix && '/has_repository_projects' ).
    organization_full-public_repos = mo_json->value_string( iv_prefix && '/public_repos' ).
    organization_full-public_gists = mo_json->value_string( iv_prefix && '/public_gists' ).
    organization_full-followers = mo_json->value_string( iv_prefix && '/followers' ).
    organization_full-following = mo_json->value_string( iv_prefix && '/following' ).
    organization_full-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    organization_full-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    organization_full-type = mo_json->value_string( iv_prefix && '/type' ).
    organization_full-total_private_repos = mo_json->value_string( iv_prefix && '/total_private_repos' ).
    organization_full-owned_private_repos = mo_json->value_string( iv_prefix && '/owned_private_repos' ).
    organization_full-private_gists = mo_json->value_string( iv_prefix && '/private_gists' ).
    organization_full-disk_usage = mo_json->value_string( iv_prefix && '/disk_usage' ).
    organization_full-collaborators = mo_json->value_string( iv_prefix && '/collaborators' ).
    organization_full-billing_email = mo_json->value_string( iv_prefix && '/billing_email' ).
* todo, object, plan, object
    organization_full-default_repository_permission = mo_json->value_string( iv_prefix && '/default_repository_permission' ).
    organization_full-members_can_create_repositorie = mo_json->value_boolean( iv_prefix && '/members_can_create_repositories' ).
    organization_full-two_factor_requirement_enabled = mo_json->value_boolean( iv_prefix && '/two_factor_requirement_enabled' ).
    organization_full-members_allowed_repository_cre = mo_json->value_string( iv_prefix && '/members_allowed_repository_creation_type' ).
    organization_full-members_can_create_public_repo = mo_json->value_boolean( iv_prefix && '/members_can_create_public_repositories' ).
    organization_full-members_can_create_private_rep = mo_json->value_boolean( iv_prefix && '/members_can_create_private_repositories' ).
    organization_full-members_can_create_internal_re = mo_json->value_boolean( iv_prefix && '/members_can_create_internal_repositories' ).
    organization_full-members_can_create_pages = mo_json->value_boolean( iv_prefix && '/members_can_create_pages' ).
    organization_full-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_org_hook.
    org_hook-id = mo_json->value_string( iv_prefix && '/id' ).
    org_hook-url = mo_json->value_string( iv_prefix && '/url' ).
    org_hook-ping_url = mo_json->value_string( iv_prefix && '/ping_url' ).
    org_hook-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, object, events, array
    org_hook-active = mo_json->value_boolean( iv_prefix && '/active' ).
* todo, object, config, object
    org_hook-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    org_hook-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    org_hook-type = mo_json->value_string( iv_prefix && '/type' ).
  ENDMETHOD.

  METHOD parse_webhook_config_url.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config_content_t.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config_secret.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_webhook_config_insecure_.
* todo, handle type string
  ENDMETHOD.

  METHOD parse_org_membership.
    org_membership-url = mo_json->value_string( iv_prefix && '/url' ).
    org_membership-state = mo_json->value_string( iv_prefix && '/state' ).
    org_membership-role = mo_json->value_string( iv_prefix && '/role' ).
    org_membership-organization_url = mo_json->value_string( iv_prefix && '/organization_url' ).
* todo, object, organization, 
* todo, object, user, 
* todo, object, permissions, object
  ENDMETHOD.

  METHOD parse_org_pre_receive_hook.
    org_pre_receive_hook-id = mo_json->value_string( iv_prefix && '/id' ).
    org_pre_receive_hook-name = mo_json->value_string( iv_prefix && '/name' ).
    org_pre_receive_hook-enforcement = mo_json->value_string( iv_prefix && '/enforcement' ).
    org_pre_receive_hook-configuration_url = mo_json->value_string( iv_prefix && '/configuration_url' ).
    org_pre_receive_hook-allow_downstream_configuration = mo_json->value_boolean( iv_prefix && '/allow_downstream_configuration' ).
  ENDMETHOD.

  METHOD parse_project.
    project-owner_url = mo_json->value_string( iv_prefix && '/owner_url' ).
    project-url = mo_json->value_string( iv_prefix && '/url' ).
    project-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    project-columns_url = mo_json->value_string( iv_prefix && '/columns_url' ).
    project-id = mo_json->value_string( iv_prefix && '/id' ).
    project-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    project-name = mo_json->value_string( iv_prefix && '/name' ).
    project-body = mo_json->value_string( iv_prefix && '/body' ).
    project-number = mo_json->value_string( iv_prefix && '/number' ).
    project-state = mo_json->value_string( iv_prefix && '/state' ).
* todo, object, creator, 
    project-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    project-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    project-organization_permission = mo_json->value_string( iv_prefix && '/organization_permission' ).
    project-private = mo_json->value_boolean( iv_prefix && '/private' ).
  ENDMETHOD.

  METHOD parse_team_simple.
    team_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    team_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    team_simple-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    team_simple-name = mo_json->value_string( iv_prefix && '/name' ).
    team_simple-description = mo_json->value_string( iv_prefix && '/description' ).
    team_simple-permission = mo_json->value_string( iv_prefix && '/permission' ).
    team_simple-privacy = mo_json->value_string( iv_prefix && '/privacy' ).
    team_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_simple-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
    team_simple-slug = mo_json->value_string( iv_prefix && '/slug' ).
    team_simple-ldap_dn = mo_json->value_string( iv_prefix && '/ldap_dn' ).
  ENDMETHOD.

  METHOD parse_team.
    team-id = mo_json->value_string( iv_prefix && '/id' ).
    team-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team-name = mo_json->value_string( iv_prefix && '/name' ).
    team-slug = mo_json->value_string( iv_prefix && '/slug' ).
    team-description = mo_json->value_string( iv_prefix && '/description' ).
    team-privacy = mo_json->value_string( iv_prefix && '/privacy' ).
    team-permission = mo_json->value_string( iv_prefix && '/permission' ).
    team-url = mo_json->value_string( iv_prefix && '/url' ).
    team-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    team-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
* todo, object, parent, 
  ENDMETHOD.

  METHOD parse_team_full.
    team_full-id = mo_json->value_string( iv_prefix && '/id' ).
    team_full-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_full-url = mo_json->value_string( iv_prefix && '/url' ).
    team_full-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_full-name = mo_json->value_string( iv_prefix && '/name' ).
    team_full-slug = mo_json->value_string( iv_prefix && '/slug' ).
    team_full-description = mo_json->value_string( iv_prefix && '/description' ).
    team_full-privacy = mo_json->value_string( iv_prefix && '/privacy' ).
    team_full-permission = mo_json->value_string( iv_prefix && '/permission' ).
    team_full-members_url = mo_json->value_string( iv_prefix && '/members_url' ).
    team_full-repositories_url = mo_json->value_string( iv_prefix && '/repositories_url' ).
* todo, object, parent, 
    team_full-members_count = mo_json->value_string( iv_prefix && '/members_count' ).
    team_full-repos_count = mo_json->value_string( iv_prefix && '/repos_count' ).
    team_full-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    team_full-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, organization, 
    team_full-ldap_dn = mo_json->value_string( iv_prefix && '/ldap_dn' ).
  ENDMETHOD.

  METHOD parse_team_discussion.
* todo, object, author, 
    team_discussion-body = mo_json->value_string( iv_prefix && '/body' ).
    team_discussion-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    team_discussion-body_version = mo_json->value_string( iv_prefix && '/body_version' ).
    team_discussion-comments_count = mo_json->value_string( iv_prefix && '/comments_count' ).
    team_discussion-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    team_discussion-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    team_discussion-last_edited_at = mo_json->value_string( iv_prefix && '/last_edited_at' ).
    team_discussion-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_discussion-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_discussion-number = mo_json->value_string( iv_prefix && '/number' ).
    team_discussion-pinned = mo_json->value_boolean( iv_prefix && '/pinned' ).
    team_discussion-private = mo_json->value_boolean( iv_prefix && '/private' ).
    team_discussion-team_url = mo_json->value_string( iv_prefix && '/team_url' ).
    team_discussion-title = mo_json->value_string( iv_prefix && '/title' ).
    team_discussion-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    team_discussion-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, reactions, 
  ENDMETHOD.

  METHOD parse_team_discussion_comment.
* todo, object, author, 
    team_discussion_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    team_discussion_comment-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    team_discussion_comment-body_version = mo_json->value_string( iv_prefix && '/body_version' ).
    team_discussion_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    team_discussion_comment-last_edited_at = mo_json->value_string( iv_prefix && '/last_edited_at' ).
    team_discussion_comment-discussion_url = mo_json->value_string( iv_prefix && '/discussion_url' ).
    team_discussion_comment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_discussion_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_discussion_comment-number = mo_json->value_string( iv_prefix && '/number' ).
    team_discussion_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    team_discussion_comment-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, reactions, 
  ENDMETHOD.

  METHOD parse_reaction.
    reaction-id = mo_json->value_string( iv_prefix && '/id' ).
    reaction-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
* todo, object, user, 
    reaction-content = mo_json->value_string( iv_prefix && '/content' ).
    reaction-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
  ENDMETHOD.

  METHOD parse_team_membership.
    team_membership-url = mo_json->value_string( iv_prefix && '/url' ).
    team_membership-role = mo_json->value_string( iv_prefix && '/role' ).
    team_membership-state = mo_json->value_string( iv_prefix && '/state' ).
  ENDMETHOD.

  METHOD parse_team_project.
    team_project-owner_url = mo_json->value_string( iv_prefix && '/owner_url' ).
    team_project-url = mo_json->value_string( iv_prefix && '/url' ).
    team_project-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_project-columns_url = mo_json->value_string( iv_prefix && '/columns_url' ).
    team_project-id = mo_json->value_string( iv_prefix && '/id' ).
    team_project-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_project-name = mo_json->value_string( iv_prefix && '/name' ).
    team_project-body = mo_json->value_string( iv_prefix && '/body' ).
    team_project-number = mo_json->value_string( iv_prefix && '/number' ).
    team_project-state = mo_json->value_string( iv_prefix && '/state' ).
* todo, object, creator, 
    team_project-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    team_project-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    team_project-organization_permission = mo_json->value_string( iv_prefix && '/organization_permission' ).
    team_project-private = mo_json->value_boolean( iv_prefix && '/private' ).
* todo, object, permissions, object
  ENDMETHOD.

  METHOD parse_team_repository.
    team_repository-id = mo_json->value_string( iv_prefix && '/id' ).
    team_repository-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    team_repository-name = mo_json->value_string( iv_prefix && '/name' ).
    team_repository-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
* todo, object, license, 
    team_repository-forks = mo_json->value_string( iv_prefix && '/forks' ).
* todo, object, permissions, object
* todo, object, owner, 
    team_repository-private = mo_json->value_boolean( iv_prefix && '/private' ).
    team_repository-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    team_repository-description = mo_json->value_string( iv_prefix && '/description' ).
    team_repository-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    team_repository-url = mo_json->value_string( iv_prefix && '/url' ).
    team_repository-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    team_repository-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    team_repository-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    team_repository-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    team_repository-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    team_repository-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    team_repository-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    team_repository-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    team_repository-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    team_repository-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    team_repository-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    team_repository-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    team_repository-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    team_repository-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    team_repository-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    team_repository-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    team_repository-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    team_repository-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    team_repository-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    team_repository-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    team_repository-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    team_repository-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    team_repository-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    team_repository-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    team_repository-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    team_repository-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    team_repository-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    team_repository-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    team_repository-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    team_repository-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    team_repository-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    team_repository-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    team_repository-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    team_repository-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    team_repository-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    team_repository-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    team_repository-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    team_repository-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    team_repository-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    team_repository-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    team_repository-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    team_repository-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    team_repository-language = mo_json->value_string( iv_prefix && '/language' ).
    team_repository-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    team_repository-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    team_repository-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    team_repository-size = mo_json->value_string( iv_prefix && '/size' ).
    team_repository-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    team_repository-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    team_repository-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
* todo, object, topics, array
    team_repository-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    team_repository-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    team_repository-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    team_repository-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    team_repository-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    team_repository-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    team_repository-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    team_repository-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    team_repository-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    team_repository-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    team_repository-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    team_repository-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/allow_rebase_merge' ).
* todo, object, template_repository, object
    team_repository-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/allow_squash_merge' ).
    team_repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    team_repository-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/allow_merge_commit' ).
    team_repository-subscribers_count = mo_json->value_string( iv_prefix && '/subscribers_count' ).
    team_repository-network_count = mo_json->value_string( iv_prefix && '/network_count' ).
    team_repository-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    team_repository-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
    team_repository-master_branch = mo_json->value_string( iv_prefix && '/master_branch' ).
    team_repository-anonymous_access_enabled = mo_json->value_boolean( iv_prefix && '/anonymous_access_enabled' ).
  ENDMETHOD.

  METHOD parse_project_card.
    project_card-url = mo_json->value_string( iv_prefix && '/url' ).
    project_card-id = mo_json->value_string( iv_prefix && '/id' ).
    project_card-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    project_card-note = mo_json->value_string( iv_prefix && '/note' ).
* todo, object, creator, 
    project_card-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    project_card-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    project_card-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    project_card-column_url = mo_json->value_string( iv_prefix && '/column_url' ).
    project_card-content_url = mo_json->value_string( iv_prefix && '/content_url' ).
    project_card-project_url = mo_json->value_string( iv_prefix && '/project_url' ).
  ENDMETHOD.

  METHOD parse_project_column.
    project_column-url = mo_json->value_string( iv_prefix && '/url' ).
    project_column-project_url = mo_json->value_string( iv_prefix && '/project_url' ).
    project_column-cards_url = mo_json->value_string( iv_prefix && '/cards_url' ).
    project_column-id = mo_json->value_string( iv_prefix && '/id' ).
    project_column-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    project_column-name = mo_json->value_string( iv_prefix && '/name' ).
    project_column-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    project_column-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_repository_collaborator_.
    repository_collaborator_permis-permission = mo_json->value_string( iv_prefix && '/permission' ).
* todo, object, user, 
  ENDMETHOD.

  METHOD parse_rate_limit.
    rate_limit-limit = mo_json->value_string( iv_prefix && '/limit' ).
    rate_limit-remaining = mo_json->value_string( iv_prefix && '/remaining' ).
    rate_limit-reset = mo_json->value_string( iv_prefix && '/reset' ).
  ENDMETHOD.

  METHOD parse_rate_limit_overview.
* todo, object, resources, object
* todo, object, rate, 
  ENDMETHOD.

  METHOD parse_full_repository.
    full_repository-id = mo_json->value_string( iv_prefix && '/id' ).
    full_repository-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    full_repository-name = mo_json->value_string( iv_prefix && '/name' ).
    full_repository-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
* todo, object, owner, 
    full_repository-private = mo_json->value_boolean( iv_prefix && '/private' ).
    full_repository-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    full_repository-description = mo_json->value_string( iv_prefix && '/description' ).
    full_repository-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    full_repository-url = mo_json->value_string( iv_prefix && '/url' ).
    full_repository-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    full_repository-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    full_repository-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    full_repository-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    full_repository-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    full_repository-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    full_repository-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    full_repository-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    full_repository-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    full_repository-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    full_repository-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    full_repository-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    full_repository-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    full_repository-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    full_repository-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    full_repository-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    full_repository-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    full_repository-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    full_repository-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    full_repository-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    full_repository-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    full_repository-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    full_repository-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    full_repository-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    full_repository-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    full_repository-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    full_repository-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    full_repository-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    full_repository-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    full_repository-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    full_repository-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    full_repository-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    full_repository-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    full_repository-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    full_repository-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    full_repository-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    full_repository-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    full_repository-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    full_repository-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    full_repository-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    full_repository-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    full_repository-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    full_repository-language = mo_json->value_string( iv_prefix && '/language' ).
    full_repository-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    full_repository-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    full_repository-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    full_repository-size = mo_json->value_string( iv_prefix && '/size' ).
    full_repository-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    full_repository-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    full_repository-is_template = mo_json->value_boolean( iv_prefix && '/is_template' ).
* todo, object, topics, array
    full_repository-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    full_repository-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    full_repository-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    full_repository-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    full_repository-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    full_repository-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    full_repository-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
    full_repository-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
    full_repository-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    full_repository-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    full_repository-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, permissions, object
    full_repository-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/allow_rebase_merge' ).
* todo, object, template_repository, object
    full_repository-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/allow_squash_merge' ).
    full_repository-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
    full_repository-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/allow_merge_commit' ).
    full_repository-subscribers_count = mo_json->value_string( iv_prefix && '/subscribers_count' ).
    full_repository-network_count = mo_json->value_string( iv_prefix && '/network_count' ).
* todo, object, license, 
* todo, object, organization, 
* todo, object, parent, 
* todo, object, source, 
    full_repository-forks = mo_json->value_string( iv_prefix && '/forks' ).
    full_repository-master_branch = mo_json->value_string( iv_prefix && '/master_branch' ).
    full_repository-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    full_repository-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
    full_repository-anonymous_access_enabled = mo_json->value_boolean( iv_prefix && '/anonymous_access_enabled' ).
  ENDMETHOD.

  METHOD parse_protected_branch_admin_e.
    protected_branch_admin_enforce-url = mo_json->value_string( iv_prefix && '/url' ).
    protected_branch_admin_enforce-enabled = mo_json->value_boolean( iv_prefix && '/enabled' ).
  ENDMETHOD.

  METHOD parse_protected_branch_pull_re.
    protected_branch_pull_request_-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, dismissal_restrictions, object
    protected_branch_pull_request_-dismiss_stale_reviews = mo_json->value_boolean( iv_prefix && '/dismiss_stale_reviews' ).
    protected_branch_pull_request_-require_code_owner_reviews = mo_json->value_boolean( iv_prefix && '/require_code_owner_reviews' ).
    protected_branch_pull_request_-required_approving_review_coun = mo_json->value_string( iv_prefix && '/required_approving_review_count' ).
  ENDMETHOD.

  METHOD parse_branch_restriction_polic.
    branch_restriction_policy-url = mo_json->value_string( iv_prefix && '/url' ).
    branch_restriction_policy-users_url = mo_json->value_string( iv_prefix && '/users_url' ).
    branch_restriction_policy-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    branch_restriction_policy-apps_url = mo_json->value_string( iv_prefix && '/apps_url' ).
* todo, object, users, array
* todo, object, teams, array
* todo, object, apps, array
  ENDMETHOD.

  METHOD parse_branch_protection.
    branch_protection-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, required_status_checks, object
* todo, object, enforce_admins, 
* todo, object, required_pull_request_reviews, 
* todo, object, restrictions, 
* todo, object, required_linear_history, object
* todo, object, allow_force_pushes, object
* todo, object, allow_deletions, object
    branch_protection-enabled = mo_json->value_boolean( iv_prefix && '/enabled' ).
    branch_protection-name = mo_json->value_string( iv_prefix && '/name' ).
    branch_protection-protection_url = mo_json->value_string( iv_prefix && '/protection_url' ).
  ENDMETHOD.

  METHOD parse_short_branch.
    short_branch-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, object, commit, object
    short_branch-protected = mo_json->value_boolean( iv_prefix && '/protected' ).
* todo, object, protection, 
    short_branch-protection_url = mo_json->value_string( iv_prefix && '/protection_url' ).
  ENDMETHOD.

  METHOD parse_git_user.
    git_user-name = mo_json->value_string( iv_prefix && '/name' ).
    git_user-email = mo_json->value_string( iv_prefix && '/email' ).
    git_user-date = mo_json->value_string( iv_prefix && '/date' ).
  ENDMETHOD.

  METHOD parse_verification.
    verification-verified = mo_json->value_boolean( iv_prefix && '/verified' ).
    verification-reason = mo_json->value_string( iv_prefix && '/reason' ).
    verification-payload = mo_json->value_string( iv_prefix && '/payload' ).
    verification-signature = mo_json->value_string( iv_prefix && '/signature' ).
  ENDMETHOD.

  METHOD parse_commit.
    commit-url = mo_json->value_string( iv_prefix && '/url' ).
    commit-sha = mo_json->value_string( iv_prefix && '/sha' ).
    commit-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    commit-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    commit-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
* todo, object, commit, object
* todo, object, author, 
* todo, object, committer, 
* todo, object, parents, array
* todo, object, stats, object
* todo, object, files, array
  ENDMETHOD.

  METHOD parse_branch_with_protection.
    branch_with_protection-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, object, commit, 
* todo, object, _links, object
    branch_with_protection-protected = mo_json->value_boolean( iv_prefix && '/protected' ).
* todo, object, protection, 
    branch_with_protection-protection_url = mo_json->value_string( iv_prefix && '/protection_url' ).
    branch_with_protection-pattern = mo_json->value_string( iv_prefix && '/pattern' ).
    branch_with_protection-required_approving_review_coun = mo_json->value_string( iv_prefix && '/required_approving_review_count' ).
  ENDMETHOD.

  METHOD parse_status_check_policy.
    status_check_policy-url = mo_json->value_string( iv_prefix && '/url' ).
    status_check_policy-strict = mo_json->value_boolean( iv_prefix && '/strict' ).
* todo, object, contexts, array
    status_check_policy-contexts_url = mo_json->value_string( iv_prefix && '/contexts_url' ).
  ENDMETHOD.

  METHOD parse_protected_branch.
    protected_branch-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, required_status_checks, 
* todo, object, required_pull_request_reviews, object
* todo, object, required_signatures, object
* todo, object, enforce_admins, object
* todo, object, required_linear_history, object
* todo, object, allow_force_pushes, object
* todo, object, allow_deletions, object
* todo, object, restrictions, 
  ENDMETHOD.

  METHOD parse_pull_request_minimal.
    pull_request_minimal-id = mo_json->value_string( iv_prefix && '/id' ).
    pull_request_minimal-number = mo_json->value_string( iv_prefix && '/number' ).
    pull_request_minimal-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, head, object
* todo, object, base, object
  ENDMETHOD.

  METHOD parse_check_run.
    check_run-id = mo_json->value_string( iv_prefix && '/id' ).
    check_run-head_sha = mo_json->value_string( iv_prefix && '/head_sha' ).
    check_run-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    check_run-external_id = mo_json->value_string( iv_prefix && '/external_id' ).
    check_run-url = mo_json->value_string( iv_prefix && '/url' ).
    check_run-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    check_run-details_url = mo_json->value_string( iv_prefix && '/details_url' ).
    check_run-status = mo_json->value_string( iv_prefix && '/status' ).
    check_run-conclusion = mo_json->value_string( iv_prefix && '/conclusion' ).
    check_run-started_at = mo_json->value_string( iv_prefix && '/started_at' ).
    check_run-completed_at = mo_json->value_string( iv_prefix && '/completed_at' ).
* todo, object, output, object
    check_run-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, object, check_suite, object
* todo, object, app, 
* todo, object, pull_requests, 
  ENDMETHOD.

  METHOD parse_check_annotation.
    check_annotation-path = mo_json->value_string( iv_prefix && '/path' ).
    check_annotation-start_line = mo_json->value_string( iv_prefix && '/start_line' ).
    check_annotation-end_line = mo_json->value_string( iv_prefix && '/end_line' ).
    check_annotation-start_column = mo_json->value_string( iv_prefix && '/start_column' ).
    check_annotation-end_column = mo_json->value_string( iv_prefix && '/end_column' ).
    check_annotation-annotation_level = mo_json->value_string( iv_prefix && '/annotation_level' ).
    check_annotation-title = mo_json->value_string( iv_prefix && '/title' ).
    check_annotation-message = mo_json->value_string( iv_prefix && '/message' ).
    check_annotation-raw_details = mo_json->value_string( iv_prefix && '/raw_details' ).
    check_annotation-blob_href = mo_json->value_string( iv_prefix && '/blob_href' ).
  ENDMETHOD.

  METHOD parse_simple_commit.
    simple_commit-id = mo_json->value_string( iv_prefix && '/id' ).
    simple_commit-tree_id = mo_json->value_string( iv_prefix && '/tree_id' ).
    simple_commit-message = mo_json->value_string( iv_prefix && '/message' ).
    simple_commit-timestamp = mo_json->value_string( iv_prefix && '/timestamp' ).
* todo, object, author, object
* todo, object, committer, object
  ENDMETHOD.

  METHOD parse_check_suite.
    check_suite-id = mo_json->value_string( iv_prefix && '/id' ).
    check_suite-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    check_suite-head_branch = mo_json->value_string( iv_prefix && '/head_branch' ).
    check_suite-head_sha = mo_json->value_string( iv_prefix && '/head_sha' ).
    check_suite-status = mo_json->value_string( iv_prefix && '/status' ).
    check_suite-conclusion = mo_json->value_string( iv_prefix && '/conclusion' ).
    check_suite-url = mo_json->value_string( iv_prefix && '/url' ).
    check_suite-before = mo_json->value_string( iv_prefix && '/before' ).
    check_suite-after = mo_json->value_string( iv_prefix && '/after' ).
* todo, object, pull_requests, array
* todo, object, app, 
* todo, object, repository, 
    check_suite-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    check_suite-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, head_commit, 
    check_suite-latest_check_runs_count = mo_json->value_string( iv_prefix && '/latest_check_runs_count' ).
    check_suite-check_runs_url = mo_json->value_string( iv_prefix && '/check_runs_url' ).
  ENDMETHOD.

  METHOD parse_check_suite_preference.
* todo, object, preferences, object
* todo, object, repository, 
  ENDMETHOD.

  METHOD parse_collaborator.
    collaborator-login = mo_json->value_string( iv_prefix && '/login' ).
    collaborator-id = mo_json->value_string( iv_prefix && '/id' ).
    collaborator-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    collaborator-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    collaborator-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    collaborator-url = mo_json->value_string( iv_prefix && '/url' ).
    collaborator-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    collaborator-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    collaborator-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    collaborator-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    collaborator-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    collaborator-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    collaborator-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    collaborator-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    collaborator-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    collaborator-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    collaborator-type = mo_json->value_string( iv_prefix && '/type' ).
    collaborator-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
* todo, object, permissions, object
  ENDMETHOD.

  METHOD parse_repository_invitation.
    repository_invitation-id = mo_json->value_string( iv_prefix && '/id' ).
* todo, object, repository, 
* todo, object, invitee, 
* todo, object, inviter, 
    repository_invitation-permissions = mo_json->value_string( iv_prefix && '/permissions' ).
    repository_invitation-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    repository_invitation-expired = mo_json->value_boolean( iv_prefix && '/expired' ).
    repository_invitation-url = mo_json->value_string( iv_prefix && '/url' ).
    repository_invitation-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    repository_invitation-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
  ENDMETHOD.

  METHOD parse_commit_comment.
    commit_comment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    commit_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    commit_comment-id = mo_json->value_string( iv_prefix && '/id' ).
    commit_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    commit_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    commit_comment-path = mo_json->value_string( iv_prefix && '/path' ).
    commit_comment-position = mo_json->value_string( iv_prefix && '/position' ).
    commit_comment-line = mo_json->value_string( iv_prefix && '/line' ).
    commit_comment-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
* todo, object, user, 
    commit_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    commit_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, author_association, 
* todo, object, reactions, 
  ENDMETHOD.

  METHOD parse_scim_error.
    scim_error-message = mo_json->value_string( iv_prefix && '/message' ).
    scim_error-documentation_url = mo_json->value_string( iv_prefix && '/documentation_url' ).
    scim_error-detail = mo_json->value_string( iv_prefix && '/detail' ).
    scim_error-status = mo_json->value_string( iv_prefix && '/status' ).
    scim_error-scimtype = mo_json->value_string( iv_prefix && '/scimType' ).
* todo, object, schemas, array
  ENDMETHOD.

  METHOD parse_branch_short.
    branch_short-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, object, commit, object
    branch_short-protected = mo_json->value_boolean( iv_prefix && '/protected' ).
  ENDMETHOD.

  METHOD parse_link.
    link-href = mo_json->value_string( iv_prefix && '/href' ).
  ENDMETHOD.

  METHOD parse_pull_request_simple.
    pull_request_simple-url = mo_json->value_string( iv_prefix && '/url' ).
    pull_request_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    pull_request_simple-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    pull_request_simple-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    pull_request_simple-diff_url = mo_json->value_string( iv_prefix && '/diff_url' ).
    pull_request_simple-patch_url = mo_json->value_string( iv_prefix && '/patch_url' ).
    pull_request_simple-issue_url = mo_json->value_string( iv_prefix && '/issue_url' ).
    pull_request_simple-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    pull_request_simple-review_comments_url = mo_json->value_string( iv_prefix && '/review_comments_url' ).
    pull_request_simple-review_comment_url = mo_json->value_string( iv_prefix && '/review_comment_url' ).
    pull_request_simple-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    pull_request_simple-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    pull_request_simple-number = mo_json->value_string( iv_prefix && '/number' ).
    pull_request_simple-state = mo_json->value_string( iv_prefix && '/state' ).
    pull_request_simple-locked = mo_json->value_boolean( iv_prefix && '/locked' ).
    pull_request_simple-title = mo_json->value_string( iv_prefix && '/title' ).
* todo, object, user, 
    pull_request_simple-body = mo_json->value_string( iv_prefix && '/body' ).
* todo, object, labels, array
* todo, object, milestone, 
    pull_request_simple-active_lock_reason = mo_json->value_string( iv_prefix && '/active_lock_reason' ).
    pull_request_simple-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    pull_request_simple-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    pull_request_simple-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    pull_request_simple-merged_at = mo_json->value_string( iv_prefix && '/merged_at' ).
    pull_request_simple-merge_commit_sha = mo_json->value_string( iv_prefix && '/merge_commit_sha' ).
* todo, object, assignee, 
* todo, object, assignees, array
* todo, object, requested_reviewers, array
* todo, object, requested_teams, array
* todo, object, head, object
* todo, object, base, object
* todo, object, _links, object
* todo, object, author_association, 
    pull_request_simple-draft = mo_json->value_boolean( iv_prefix && '/draft' ).
  ENDMETHOD.

  METHOD parse_simple_commit_status.
    simple_commit_status-description = mo_json->value_string( iv_prefix && '/description' ).
    simple_commit_status-id = mo_json->value_string( iv_prefix && '/id' ).
    simple_commit_status-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    simple_commit_status-state = mo_json->value_string( iv_prefix && '/state' ).
    simple_commit_status-context = mo_json->value_string( iv_prefix && '/context' ).
    simple_commit_status-target_url = mo_json->value_string( iv_prefix && '/target_url' ).
    simple_commit_status-required = mo_json->value_boolean( iv_prefix && '/required' ).
    simple_commit_status-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    simple_commit_status-url = mo_json->value_string( iv_prefix && '/url' ).
    simple_commit_status-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    simple_commit_status-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_combined_commit_status.
    combined_commit_status-state = mo_json->value_string( iv_prefix && '/state' ).
* todo, object, statuses, array
    combined_commit_status-sha = mo_json->value_string( iv_prefix && '/sha' ).
    combined_commit_status-total_count = mo_json->value_string( iv_prefix && '/total_count' ).
* todo, object, repository, 
    combined_commit_status-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    combined_commit_status-url = mo_json->value_string( iv_prefix && '/url' ).
  ENDMETHOD.

  METHOD parse_status.
    status-url = mo_json->value_string( iv_prefix && '/url' ).
    status-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    status-id = mo_json->value_string( iv_prefix && '/id' ).
    status-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    status-state = mo_json->value_string( iv_prefix && '/state' ).
    status-description = mo_json->value_string( iv_prefix && '/description' ).
    status-target_url = mo_json->value_string( iv_prefix && '/target_url' ).
    status-context = mo_json->value_string( iv_prefix && '/context' ).
    status-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    status-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, creator, 
  ENDMETHOD.

  METHOD parse_diff_entry.
    diff_entry-sha = mo_json->value_string( iv_prefix && '/sha' ).
    diff_entry-filename = mo_json->value_string( iv_prefix && '/filename' ).
    diff_entry-status = mo_json->value_string( iv_prefix && '/status' ).
    diff_entry-additions = mo_json->value_string( iv_prefix && '/additions' ).
    diff_entry-deletions = mo_json->value_string( iv_prefix && '/deletions' ).
    diff_entry-changes = mo_json->value_string( iv_prefix && '/changes' ).
    diff_entry-blob_url = mo_json->value_string( iv_prefix && '/blob_url' ).
    diff_entry-raw_url = mo_json->value_string( iv_prefix && '/raw_url' ).
    diff_entry-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    diff_entry-patch = mo_json->value_string( iv_prefix && '/patch' ).
    diff_entry-previous_filename = mo_json->value_string( iv_prefix && '/previous_filename' ).
  ENDMETHOD.

  METHOD parse_commit_comparison.
    commit_comparison-url = mo_json->value_string( iv_prefix && '/url' ).
    commit_comparison-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    commit_comparison-permalink_url = mo_json->value_string( iv_prefix && '/permalink_url' ).
    commit_comparison-diff_url = mo_json->value_string( iv_prefix && '/diff_url' ).
    commit_comparison-patch_url = mo_json->value_string( iv_prefix && '/patch_url' ).
* todo, object, base_commit, 
* todo, object, merge_base_commit, 
    commit_comparison-status = mo_json->value_string( iv_prefix && '/status' ).
    commit_comparison-ahead_by = mo_json->value_string( iv_prefix && '/ahead_by' ).
    commit_comparison-behind_by = mo_json->value_string( iv_prefix && '/behind_by' ).
    commit_comparison-total_commits = mo_json->value_string( iv_prefix && '/total_commits' ).
* todo, object, commits, array
* todo, object, files, array
  ENDMETHOD.

  METHOD parse_content_tree.
    content_tree-type = mo_json->value_string( iv_prefix && '/type' ).
    content_tree-size = mo_json->value_string( iv_prefix && '/size' ).
    content_tree-name = mo_json->value_string( iv_prefix && '/name' ).
    content_tree-path = mo_json->value_string( iv_prefix && '/path' ).
    content_tree-sha = mo_json->value_string( iv_prefix && '/sha' ).
    content_tree-url = mo_json->value_string( iv_prefix && '/url' ).
    content_tree-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    content_tree-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    content_tree-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
* todo, object, entries, array
* todo, object, _links, object
  ENDMETHOD.

  METHOD parse_content_directory.
* todo, handle type array
  ENDMETHOD.

  METHOD parse_content_file.
    content_file-type = mo_json->value_string( iv_prefix && '/type' ).
    content_file-encoding = mo_json->value_string( iv_prefix && '/encoding' ).
    content_file-size = mo_json->value_string( iv_prefix && '/size' ).
    content_file-name = mo_json->value_string( iv_prefix && '/name' ).
    content_file-path = mo_json->value_string( iv_prefix && '/path' ).
    content_file-content = mo_json->value_string( iv_prefix && '/content' ).
    content_file-sha = mo_json->value_string( iv_prefix && '/sha' ).
    content_file-url = mo_json->value_string( iv_prefix && '/url' ).
    content_file-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    content_file-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    content_file-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
* todo, object, _links, object
    content_file-target = mo_json->value_string( iv_prefix && '/target' ).
    content_file-submodule_git_url = mo_json->value_string( iv_prefix && '/submodule_git_url' ).
  ENDMETHOD.

  METHOD parse_content_symlink.
    content_symlink-type = mo_json->value_string( iv_prefix && '/type' ).
    content_symlink-target = mo_json->value_string( iv_prefix && '/target' ).
    content_symlink-size = mo_json->value_string( iv_prefix && '/size' ).
    content_symlink-name = mo_json->value_string( iv_prefix && '/name' ).
    content_symlink-path = mo_json->value_string( iv_prefix && '/path' ).
    content_symlink-sha = mo_json->value_string( iv_prefix && '/sha' ).
    content_symlink-url = mo_json->value_string( iv_prefix && '/url' ).
    content_symlink-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    content_symlink-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    content_symlink-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
* todo, object, _links, object
  ENDMETHOD.

  METHOD parse_content_submodule.
    content_submodule-type = mo_json->value_string( iv_prefix && '/type' ).
    content_submodule-submodule_git_url = mo_json->value_string( iv_prefix && '/submodule_git_url' ).
    content_submodule-size = mo_json->value_string( iv_prefix && '/size' ).
    content_submodule-name = mo_json->value_string( iv_prefix && '/name' ).
    content_submodule-path = mo_json->value_string( iv_prefix && '/path' ).
    content_submodule-sha = mo_json->value_string( iv_prefix && '/sha' ).
    content_submodule-url = mo_json->value_string( iv_prefix && '/url' ).
    content_submodule-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    content_submodule-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    content_submodule-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
* todo, object, _links, object
  ENDMETHOD.

  METHOD parse_file_commit.
* todo, object, content, object
* todo, object, commit, object
  ENDMETHOD.

  METHOD parse_contributor.
    contributor-login = mo_json->value_string( iv_prefix && '/login' ).
    contributor-id = mo_json->value_string( iv_prefix && '/id' ).
    contributor-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    contributor-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    contributor-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    contributor-url = mo_json->value_string( iv_prefix && '/url' ).
    contributor-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    contributor-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    contributor-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    contributor-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    contributor-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    contributor-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    contributor-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    contributor-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    contributor-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    contributor-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    contributor-type = mo_json->value_string( iv_prefix && '/type' ).
    contributor-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    contributor-contributions = mo_json->value_string( iv_prefix && '/contributions' ).
    contributor-email = mo_json->value_string( iv_prefix && '/email' ).
    contributor-name = mo_json->value_string( iv_prefix && '/name' ).
  ENDMETHOD.

  METHOD parse_deployment.
    deployment-url = mo_json->value_string( iv_prefix && '/url' ).
    deployment-id = mo_json->value_string( iv_prefix && '/id' ).
    deployment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    deployment-sha = mo_json->value_string( iv_prefix && '/sha' ).
    deployment-ref = mo_json->value_string( iv_prefix && '/ref' ).
    deployment-task = mo_json->value_string( iv_prefix && '/task' ).
* todo, object, payload, object
    deployment-original_environment = mo_json->value_string( iv_prefix && '/original_environment' ).
    deployment-environment = mo_json->value_string( iv_prefix && '/environment' ).
    deployment-description = mo_json->value_string( iv_prefix && '/description' ).
* todo, object, creator, 
    deployment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    deployment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    deployment-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    deployment-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    deployment-transient_environment = mo_json->value_boolean( iv_prefix && '/transient_environment' ).
    deployment-production_environment = mo_json->value_boolean( iv_prefix && '/production_environment' ).
* todo, object, performed_via_github_app, 
  ENDMETHOD.

  METHOD parse_deployment_status.
    deployment_status-url = mo_json->value_string( iv_prefix && '/url' ).
    deployment_status-id = mo_json->value_string( iv_prefix && '/id' ).
    deployment_status-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    deployment_status-state = mo_json->value_string( iv_prefix && '/state' ).
* todo, object, creator, 
    deployment_status-description = mo_json->value_string( iv_prefix && '/description' ).
    deployment_status-environment = mo_json->value_string( iv_prefix && '/environment' ).
    deployment_status-target_url = mo_json->value_string( iv_prefix && '/target_url' ).
    deployment_status-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    deployment_status-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    deployment_status-deployment_url = mo_json->value_string( iv_prefix && '/deployment_url' ).
    deployment_status-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    deployment_status-environment_url = mo_json->value_string( iv_prefix && '/environment_url' ).
    deployment_status-log_url = mo_json->value_string( iv_prefix && '/log_url' ).
* todo, object, performed_via_github_app, 
  ENDMETHOD.

  METHOD parse_short_blob.
    short_blob-url = mo_json->value_string( iv_prefix && '/url' ).
    short_blob-sha = mo_json->value_string( iv_prefix && '/sha' ).
  ENDMETHOD.

  METHOD parse_blob.
    blob-content = mo_json->value_string( iv_prefix && '/content' ).
    blob-encoding = mo_json->value_string( iv_prefix && '/encoding' ).
    blob-url = mo_json->value_string( iv_prefix && '/url' ).
    blob-sha = mo_json->value_string( iv_prefix && '/sha' ).
    blob-size = mo_json->value_string( iv_prefix && '/size' ).
    blob-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    blob-highlighted_content = mo_json->value_string( iv_prefix && '/highlighted_content' ).
  ENDMETHOD.

  METHOD parse_git_commit.
    git_commit-sha = mo_json->value_string( iv_prefix && '/sha' ).
    git_commit-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    git_commit-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, author, object
* todo, object, committer, object
    git_commit-message = mo_json->value_string( iv_prefix && '/message' ).
* todo, object, tree, object
* todo, object, parents, array
* todo, object, verification, object
    git_commit-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
  ENDMETHOD.

  METHOD parse_git_ref.
    git_ref-ref = mo_json->value_string( iv_prefix && '/ref' ).
    git_ref-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    git_ref-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, object, object
  ENDMETHOD.

  METHOD parse_git_tag.
    git_tag-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    git_tag-tag = mo_json->value_string( iv_prefix && '/tag' ).
    git_tag-sha = mo_json->value_string( iv_prefix && '/sha' ).
    git_tag-url = mo_json->value_string( iv_prefix && '/url' ).
    git_tag-message = mo_json->value_string( iv_prefix && '/message' ).
* todo, object, tagger, object
* todo, object, object, object
* todo, object, verification, 
  ENDMETHOD.

  METHOD parse_git_tree.
    git_tree-sha = mo_json->value_string( iv_prefix && '/sha' ).
    git_tree-url = mo_json->value_string( iv_prefix && '/url' ).
    git_tree-truncated = mo_json->value_boolean( iv_prefix && '/truncated' ).
* todo, object, tree, array
  ENDMETHOD.

  METHOD parse_hook_response.
    hook_response-code = mo_json->value_string( iv_prefix && '/code' ).
    hook_response-status = mo_json->value_string( iv_prefix && '/status' ).
    hook_response-message = mo_json->value_string( iv_prefix && '/message' ).
  ENDMETHOD.

  METHOD parse_hook.
    hook-type = mo_json->value_string( iv_prefix && '/type' ).
    hook-id = mo_json->value_string( iv_prefix && '/id' ).
    hook-name = mo_json->value_string( iv_prefix && '/name' ).
    hook-active = mo_json->value_boolean( iv_prefix && '/active' ).
* todo, object, events, array
* todo, object, config, object
    hook-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    hook-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    hook-url = mo_json->value_string( iv_prefix && '/url' ).
    hook-test_url = mo_json->value_string( iv_prefix && '/test_url' ).
    hook-ping_url = mo_json->value_string( iv_prefix && '/ping_url' ).
* todo, object, last_response, 
  ENDMETHOD.

  METHOD parse_issue_event_label.
    issue_event_label-name = mo_json->value_string( iv_prefix && '/name' ).
    issue_event_label-color = mo_json->value_string( iv_prefix && '/color' ).
  ENDMETHOD.

  METHOD parse_issue_event_dismissed_re.
    issue_event_dismissed_review-state = mo_json->value_string( iv_prefix && '/state' ).
    issue_event_dismissed_review-review_id = mo_json->value_string( iv_prefix && '/review_id' ).
    issue_event_dismissed_review-dismissal_message = mo_json->value_string( iv_prefix && '/dismissal_message' ).
    issue_event_dismissed_review-dismissal_commit_id = mo_json->value_string( iv_prefix && '/dismissal_commit_id' ).
  ENDMETHOD.

  METHOD parse_issue_event_milestone.
    issue_event_milestone-title = mo_json->value_string( iv_prefix && '/title' ).
  ENDMETHOD.

  METHOD parse_issue_event_project_card.
    issue_event_project_card-url = mo_json->value_string( iv_prefix && '/url' ).
    issue_event_project_card-id = mo_json->value_string( iv_prefix && '/id' ).
    issue_event_project_card-project_url = mo_json->value_string( iv_prefix && '/project_url' ).
    issue_event_project_card-project_id = mo_json->value_string( iv_prefix && '/project_id' ).
    issue_event_project_card-column_name = mo_json->value_string( iv_prefix && '/column_name' ).
    issue_event_project_card-previous_column_name = mo_json->value_string( iv_prefix && '/previous_column_name' ).
  ENDMETHOD.

  METHOD parse_issue_event_rename.
    issue_event_rename-from = mo_json->value_string( iv_prefix && '/from' ).
    issue_event_rename-to = mo_json->value_string( iv_prefix && '/to' ).
  ENDMETHOD.

  METHOD parse_issue_event.
    issue_event-id = mo_json->value_string( iv_prefix && '/id' ).
    issue_event-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    issue_event-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, actor, 
    issue_event-event = mo_json->value_string( iv_prefix && '/event' ).
    issue_event-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    issue_event-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    issue_event-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
* todo, object, issue, 
* todo, object, label, 
* todo, object, assignee, 
* todo, object, assigner, 
* todo, object, review_requester, 
* todo, object, requested_reviewer, 
* todo, object, requested_team, 
* todo, object, dismissed_review, 
* todo, object, milestone, 
* todo, object, project_card, 
* todo, object, rename, 
* todo, object, author_association, 
    issue_event-lock_reason = mo_json->value_string( iv_prefix && '/lock_reason' ).
  ENDMETHOD.

  METHOD parse_issue_event_for_issue.
    issue_event_for_issue-id = mo_json->value_string( iv_prefix && '/id' ).
    issue_event_for_issue-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    issue_event_for_issue-url = mo_json->value_string( iv_prefix && '/url' ).
* todo, object, actor, 
    issue_event_for_issue-event = mo_json->value_string( iv_prefix && '/event' ).
    issue_event_for_issue-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    issue_event_for_issue-commit_url = mo_json->value_string( iv_prefix && '/commit_url' ).
    issue_event_for_issue-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    issue_event_for_issue-sha = mo_json->value_string( iv_prefix && '/sha' ).
    issue_event_for_issue-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    issue_event_for_issue-message = mo_json->value_string( iv_prefix && '/message' ).
    issue_event_for_issue-issue_url = mo_json->value_string( iv_prefix && '/issue_url' ).
    issue_event_for_issue-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, author_association, 
    issue_event_for_issue-body = mo_json->value_string( iv_prefix && '/body' ).
    issue_event_for_issue-lock_reason = mo_json->value_string( iv_prefix && '/lock_reason' ).
    issue_event_for_issue-submitted_at = mo_json->value_string( iv_prefix && '/submitted_at' ).
    issue_event_for_issue-state = mo_json->value_string( iv_prefix && '/state' ).
    issue_event_for_issue-pull_request_url = mo_json->value_string( iv_prefix && '/pull_request_url' ).
    issue_event_for_issue-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    issue_event_for_issue-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
  ENDMETHOD.

  METHOD parse_deploy_key.
    deploy_key-id = mo_json->value_string( iv_prefix && '/id' ).
    deploy_key-key = mo_json->value_string( iv_prefix && '/key' ).
    deploy_key-url = mo_json->value_string( iv_prefix && '/url' ).
    deploy_key-title = mo_json->value_string( iv_prefix && '/title' ).
    deploy_key-verified = mo_json->value_boolean( iv_prefix && '/verified' ).
    deploy_key-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    deploy_key-read_only = mo_json->value_boolean( iv_prefix && '/read_only' ).
  ENDMETHOD.

  METHOD parse_language.
  ENDMETHOD.

  METHOD parse_license_content.
    license_content-name = mo_json->value_string( iv_prefix && '/name' ).
    license_content-path = mo_json->value_string( iv_prefix && '/path' ).
    license_content-sha = mo_json->value_string( iv_prefix && '/sha' ).
    license_content-size = mo_json->value_string( iv_prefix && '/size' ).
    license_content-url = mo_json->value_string( iv_prefix && '/url' ).
    license_content-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    license_content-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    license_content-download_url = mo_json->value_string( iv_prefix && '/download_url' ).
    license_content-type = mo_json->value_string( iv_prefix && '/type' ).
    license_content-content = mo_json->value_string( iv_prefix && '/content' ).
    license_content-encoding = mo_json->value_string( iv_prefix && '/encoding' ).
* todo, object, _links, object
* todo, object, license, 
  ENDMETHOD.

  METHOD parse_pages_source_hash.
    pages_source_hash-branch = mo_json->value_string( iv_prefix && '/branch' ).
    pages_source_hash-path = mo_json->value_string( iv_prefix && '/path' ).
  ENDMETHOD.

  METHOD parse_page.
    page-url = mo_json->value_string( iv_prefix && '/url' ).
    page-status = mo_json->value_string( iv_prefix && '/status' ).
    page-cname = mo_json->value_string( iv_prefix && '/cname' ).
    page-custom_404 = mo_json->value_boolean( iv_prefix && '/custom_404' ).
    page-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
* todo, object, source, 
    page-public = mo_json->value_boolean( iv_prefix && '/public' ).
  ENDMETHOD.

  METHOD parse_page_build.
    page_build-url = mo_json->value_string( iv_prefix && '/url' ).
    page_build-status = mo_json->value_string( iv_prefix && '/status' ).
* todo, object, error, object
* todo, object, pusher, 
    page_build-commit = mo_json->value_string( iv_prefix && '/commit' ).
    page_build-duration = mo_json->value_string( iv_prefix && '/duration' ).
    page_build-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    page_build-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
  ENDMETHOD.

  METHOD parse_page_build_status.
    page_build_status-url = mo_json->value_string( iv_prefix && '/url' ).
    page_build_status-status = mo_json->value_string( iv_prefix && '/status' ).
  ENDMETHOD.

  METHOD parse_repository_pre_receive_h.
    repository_pre_receive_hook-id = mo_json->value_string( iv_prefix && '/id' ).
    repository_pre_receive_hook-name = mo_json->value_string( iv_prefix && '/name' ).
    repository_pre_receive_hook-enforcement = mo_json->value_string( iv_prefix && '/enforcement' ).
    repository_pre_receive_hook-configuration_url = mo_json->value_string( iv_prefix && '/configuration_url' ).
  ENDMETHOD.

  METHOD parse_pull_request.
    pull_request-url = mo_json->value_string( iv_prefix && '/url' ).
    pull_request-id = mo_json->value_string( iv_prefix && '/id' ).
    pull_request-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    pull_request-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    pull_request-diff_url = mo_json->value_string( iv_prefix && '/diff_url' ).
    pull_request-patch_url = mo_json->value_string( iv_prefix && '/patch_url' ).
    pull_request-issue_url = mo_json->value_string( iv_prefix && '/issue_url' ).
    pull_request-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    pull_request-review_comments_url = mo_json->value_string( iv_prefix && '/review_comments_url' ).
    pull_request-review_comment_url = mo_json->value_string( iv_prefix && '/review_comment_url' ).
    pull_request-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    pull_request-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    pull_request-number = mo_json->value_string( iv_prefix && '/number' ).
    pull_request-state = mo_json->value_string( iv_prefix && '/state' ).
    pull_request-locked = mo_json->value_boolean( iv_prefix && '/locked' ).
    pull_request-title = mo_json->value_string( iv_prefix && '/title' ).
* todo, object, user, 
    pull_request-body = mo_json->value_string( iv_prefix && '/body' ).
* todo, object, labels, array
* todo, object, milestone, 
    pull_request-active_lock_reason = mo_json->value_string( iv_prefix && '/active_lock_reason' ).
    pull_request-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    pull_request-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    pull_request-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
    pull_request-merged_at = mo_json->value_string( iv_prefix && '/merged_at' ).
    pull_request-merge_commit_sha = mo_json->value_string( iv_prefix && '/merge_commit_sha' ).
* todo, object, assignee, 
* todo, object, assignees, array
* todo, object, requested_reviewers, array
* todo, object, requested_teams, array
* todo, object, head, object
* todo, object, base, object
* todo, object, _links, object
* todo, object, author_association, 
    pull_request-draft = mo_json->value_boolean( iv_prefix && '/draft' ).
    pull_request-merged = mo_json->value_boolean( iv_prefix && '/merged' ).
    pull_request-mergeable = mo_json->value_boolean( iv_prefix && '/mergeable' ).
    pull_request-rebaseable = mo_json->value_boolean( iv_prefix && '/rebaseable' ).
    pull_request-mergeable_state = mo_json->value_string( iv_prefix && '/mergeable_state' ).
* todo, object, merged_by, 
    pull_request-comments = mo_json->value_string( iv_prefix && '/comments' ).
    pull_request-review_comments = mo_json->value_string( iv_prefix && '/review_comments' ).
    pull_request-maintainer_can_modify = mo_json->value_boolean( iv_prefix && '/maintainer_can_modify' ).
    pull_request-commits = mo_json->value_string( iv_prefix && '/commits' ).
    pull_request-additions = mo_json->value_string( iv_prefix && '/additions' ).
    pull_request-deletions = mo_json->value_string( iv_prefix && '/deletions' ).
    pull_request-changed_files = mo_json->value_string( iv_prefix && '/changed_files' ).
  ENDMETHOD.

  METHOD parse_pull_request_review_comm.
    pull_request_review_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    pull_request_review_comment-pull_request_review_id = mo_json->value_string( iv_prefix && '/pull_request_review_id' ).
    pull_request_review_comment-id = mo_json->value_string( iv_prefix && '/id' ).
    pull_request_review_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    pull_request_review_comment-diff_hunk = mo_json->value_string( iv_prefix && '/diff_hunk' ).
    pull_request_review_comment-path = mo_json->value_string( iv_prefix && '/path' ).
    pull_request_review_comment-position = mo_json->value_string( iv_prefix && '/position' ).
    pull_request_review_comment-original_position = mo_json->value_string( iv_prefix && '/original_position' ).
    pull_request_review_comment-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    pull_request_review_comment-original_commit_id = mo_json->value_string( iv_prefix && '/original_commit_id' ).
    pull_request_review_comment-in_reply_to_id = mo_json->value_string( iv_prefix && '/in_reply_to_id' ).
* todo, object, user, 
    pull_request_review_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    pull_request_review_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    pull_request_review_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    pull_request_review_comment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    pull_request_review_comment-pull_request_url = mo_json->value_string( iv_prefix && '/pull_request_url' ).
* todo, object, author_association, 
* todo, object, _links, object
    pull_request_review_comment-start_line = mo_json->value_string( iv_prefix && '/start_line' ).
    pull_request_review_comment-original_start_line = mo_json->value_string( iv_prefix && '/original_start_line' ).
    pull_request_review_comment-start_side = mo_json->value_string( iv_prefix && '/start_side' ).
    pull_request_review_comment-line = mo_json->value_string( iv_prefix && '/line' ).
    pull_request_review_comment-original_line = mo_json->value_string( iv_prefix && '/original_line' ).
    pull_request_review_comment-side = mo_json->value_string( iv_prefix && '/side' ).
* todo, object, reactions, 
    pull_request_review_comment-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    pull_request_review_comment-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
  ENDMETHOD.

  METHOD parse_pull_request_merge_resul.
    pull_request_merge_result-sha = mo_json->value_string( iv_prefix && '/sha' ).
    pull_request_merge_result-merged = mo_json->value_boolean( iv_prefix && '/merged' ).
    pull_request_merge_result-message = mo_json->value_string( iv_prefix && '/message' ).
  ENDMETHOD.

  METHOD parse_pull_request_review_requ.
* todo, object, users, array
* todo, object, teams, array
  ENDMETHOD.

  METHOD parse_pull_request_review.
    pull_request_review-id = mo_json->value_string( iv_prefix && '/id' ).
    pull_request_review-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
* todo, object, user, 
    pull_request_review-body = mo_json->value_string( iv_prefix && '/body' ).
    pull_request_review-state = mo_json->value_string( iv_prefix && '/state' ).
    pull_request_review-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    pull_request_review-pull_request_url = mo_json->value_string( iv_prefix && '/pull_request_url' ).
* todo, object, _links, object
    pull_request_review-submitted_at = mo_json->value_string( iv_prefix && '/submitted_at' ).
    pull_request_review-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    pull_request_review-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    pull_request_review-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
* todo, object, author_association, 
  ENDMETHOD.

  METHOD parse_review_comment.
    review_comment-url = mo_json->value_string( iv_prefix && '/url' ).
    review_comment-pull_request_review_id = mo_json->value_string( iv_prefix && '/pull_request_review_id' ).
    review_comment-id = mo_json->value_string( iv_prefix && '/id' ).
    review_comment-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    review_comment-diff_hunk = mo_json->value_string( iv_prefix && '/diff_hunk' ).
    review_comment-path = mo_json->value_string( iv_prefix && '/path' ).
    review_comment-position = mo_json->value_string( iv_prefix && '/position' ).
    review_comment-original_position = mo_json->value_string( iv_prefix && '/original_position' ).
    review_comment-commit_id = mo_json->value_string( iv_prefix && '/commit_id' ).
    review_comment-original_commit_id = mo_json->value_string( iv_prefix && '/original_commit_id' ).
    review_comment-in_reply_to_id = mo_json->value_string( iv_prefix && '/in_reply_to_id' ).
* todo, object, user, 
    review_comment-body = mo_json->value_string( iv_prefix && '/body' ).
    review_comment-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    review_comment-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    review_comment-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    review_comment-pull_request_url = mo_json->value_string( iv_prefix && '/pull_request_url' ).
* todo, object, author_association, 
* todo, object, _links, object
    review_comment-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    review_comment-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    review_comment-side = mo_json->value_string( iv_prefix && '/side' ).
    review_comment-start_side = mo_json->value_string( iv_prefix && '/start_side' ).
    review_comment-line = mo_json->value_string( iv_prefix && '/line' ).
    review_comment-original_line = mo_json->value_string( iv_prefix && '/original_line' ).
    review_comment-start_line = mo_json->value_string( iv_prefix && '/start_line' ).
    review_comment-original_start_line = mo_json->value_string( iv_prefix && '/original_start_line' ).
  ENDMETHOD.

  METHOD parse_release_asset.
    release_asset-url = mo_json->value_string( iv_prefix && '/url' ).
    release_asset-browser_download_url = mo_json->value_string( iv_prefix && '/browser_download_url' ).
    release_asset-id = mo_json->value_string( iv_prefix && '/id' ).
    release_asset-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    release_asset-name = mo_json->value_string( iv_prefix && '/name' ).
    release_asset-label = mo_json->value_string( iv_prefix && '/label' ).
    release_asset-state = mo_json->value_string( iv_prefix && '/state' ).
    release_asset-content_type = mo_json->value_string( iv_prefix && '/content_type' ).
    release_asset-size = mo_json->value_string( iv_prefix && '/size' ).
    release_asset-download_count = mo_json->value_string( iv_prefix && '/download_count' ).
    release_asset-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    release_asset-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, uploader, 
  ENDMETHOD.

  METHOD parse_release.
    release-url = mo_json->value_string( iv_prefix && '/url' ).
    release-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    release-assets_url = mo_json->value_string( iv_prefix && '/assets_url' ).
    release-upload_url = mo_json->value_string( iv_prefix && '/upload_url' ).
    release-tarball_url = mo_json->value_string( iv_prefix && '/tarball_url' ).
    release-zipball_url = mo_json->value_string( iv_prefix && '/zipball_url' ).
    release-id = mo_json->value_string( iv_prefix && '/id' ).
    release-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    release-tag_name = mo_json->value_string( iv_prefix && '/tag_name' ).
    release-target_commitish = mo_json->value_string( iv_prefix && '/target_commitish' ).
    release-name = mo_json->value_string( iv_prefix && '/name' ).
    release-body = mo_json->value_string( iv_prefix && '/body' ).
    release-draft = mo_json->value_boolean( iv_prefix && '/draft' ).
    release-prerelease = mo_json->value_boolean( iv_prefix && '/prerelease' ).
    release-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    release-published_at = mo_json->value_string( iv_prefix && '/published_at' ).
* todo, object, author, 
* todo, object, assets, array
    release-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    release-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
  ENDMETHOD.

  METHOD parse_stargazer.
    stargazer-starred_at = mo_json->value_string( iv_prefix && '/starred_at' ).
* todo, object, user, 
  ENDMETHOD.

  METHOD parse_code_frequency_stat.
* todo, handle type array
  ENDMETHOD.

  METHOD parse_commit_activity.
* todo, object, days, array
    commit_activity-total = mo_json->value_string( iv_prefix && '/total' ).
    commit_activity-week = mo_json->value_string( iv_prefix && '/week' ).
  ENDMETHOD.

  METHOD parse_contributor_activity.
* todo, object, author, 
    contributor_activity-total = mo_json->value_string( iv_prefix && '/total' ).
* todo, object, weeks, array
  ENDMETHOD.

  METHOD parse_participation_stats.
* todo, object, all, array
* todo, object, owner, array
  ENDMETHOD.

  METHOD parse_repository_subscription.
    repository_subscription-subscribed = mo_json->value_boolean( iv_prefix && '/subscribed' ).
    repository_subscription-ignored = mo_json->value_boolean( iv_prefix && '/ignored' ).
    repository_subscription-reason = mo_json->value_string( iv_prefix && '/reason' ).
    repository_subscription-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    repository_subscription-url = mo_json->value_string( iv_prefix && '/url' ).
    repository_subscription-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
  ENDMETHOD.

  METHOD parse_tag.
    tag-name = mo_json->value_string( iv_prefix && '/name' ).
* todo, object, commit, object
    tag-zipball_url = mo_json->value_string( iv_prefix && '/zipball_url' ).
    tag-tarball_url = mo_json->value_string( iv_prefix && '/tarball_url' ).
    tag-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
  ENDMETHOD.

  METHOD parse_topic.
* todo, object, names, array
  ENDMETHOD.

  METHOD parse_search_result_text_match.
* todo, handle type array
  ENDMETHOD.

  METHOD parse_code_search_result_item.
    code_search_result_item-name = mo_json->value_string( iv_prefix && '/name' ).
    code_search_result_item-path = mo_json->value_string( iv_prefix && '/path' ).
    code_search_result_item-sha = mo_json->value_string( iv_prefix && '/sha' ).
    code_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    code_search_result_item-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    code_search_result_item-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
* todo, object, repository, 
    code_search_result_item-score = mo_json->value_string( iv_prefix && '/score' ).
    code_search_result_item-file_size = mo_json->value_string( iv_prefix && '/file_size' ).
    code_search_result_item-language = mo_json->value_string( iv_prefix && '/language' ).
    code_search_result_item-last_modified_at = mo_json->value_string( iv_prefix && '/last_modified_at' ).
* todo, object, line_numbers, array
* todo, object, text_matches, 
  ENDMETHOD.

  METHOD parse_commit_search_result_ite.
    commit_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    commit_search_result_item-sha = mo_json->value_string( iv_prefix && '/sha' ).
    commit_search_result_item-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    commit_search_result_item-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
* todo, object, commit, object
* todo, object, author, 
* todo, object, committer, 
* todo, object, parents, array
* todo, object, repository, 
    commit_search_result_item-score = mo_json->value_string( iv_prefix && '/score' ).
    commit_search_result_item-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
* todo, object, text_matches, 
  ENDMETHOD.

  METHOD parse_issue_search_result_item.
    issue_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    issue_search_result_item-repository_url = mo_json->value_string( iv_prefix && '/repository_url' ).
    issue_search_result_item-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    issue_search_result_item-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    issue_search_result_item-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    issue_search_result_item-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    issue_search_result_item-id = mo_json->value_string( iv_prefix && '/id' ).
    issue_search_result_item-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    issue_search_result_item-number = mo_json->value_string( iv_prefix && '/number' ).
    issue_search_result_item-title = mo_json->value_string( iv_prefix && '/title' ).
    issue_search_result_item-locked = mo_json->value_boolean( iv_prefix && '/locked' ).
    issue_search_result_item-active_lock_reason = mo_json->value_string( iv_prefix && '/active_lock_reason' ).
* todo, object, assignees, array
* todo, object, user, 
* todo, object, labels, array
    issue_search_result_item-state = mo_json->value_string( iv_prefix && '/state' ).
* todo, object, assignee, 
* todo, object, milestone, 
    issue_search_result_item-comments = mo_json->value_string( iv_prefix && '/comments' ).
    issue_search_result_item-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    issue_search_result_item-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    issue_search_result_item-closed_at = mo_json->value_string( iv_prefix && '/closed_at' ).
* todo, object, text_matches, 
* todo, object, pull_request, object
    issue_search_result_item-body = mo_json->value_string( iv_prefix && '/body' ).
    issue_search_result_item-score = mo_json->value_string( iv_prefix && '/score' ).
* todo, object, author_association, 
    issue_search_result_item-draft = mo_json->value_boolean( iv_prefix && '/draft' ).
* todo, object, repository, 
    issue_search_result_item-body_html = mo_json->value_string( iv_prefix && '/body_html' ).
    issue_search_result_item-body_text = mo_json->value_string( iv_prefix && '/body_text' ).
    issue_search_result_item-timeline_url = mo_json->value_string( iv_prefix && '/timeline_url' ).
* todo, object, performed_via_github_app, 
  ENDMETHOD.

  METHOD parse_label_search_result_item.
    label_search_result_item-id = mo_json->value_string( iv_prefix && '/id' ).
    label_search_result_item-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    label_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    label_search_result_item-name = mo_json->value_string( iv_prefix && '/name' ).
    label_search_result_item-color = mo_json->value_string( iv_prefix && '/color' ).
    label_search_result_item-default = mo_json->value_boolean( iv_prefix && '/default' ).
    label_search_result_item-description = mo_json->value_string( iv_prefix && '/description' ).
    label_search_result_item-score = mo_json->value_string( iv_prefix && '/score' ).
* todo, object, text_matches, 
  ENDMETHOD.

  METHOD parse_repo_search_result_item.
    repo_search_result_item-id = mo_json->value_string( iv_prefix && '/id' ).
    repo_search_result_item-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    repo_search_result_item-name = mo_json->value_string( iv_prefix && '/name' ).
    repo_search_result_item-full_name = mo_json->value_string( iv_prefix && '/full_name' ).
* todo, object, owner, 
    repo_search_result_item-private = mo_json->value_boolean( iv_prefix && '/private' ).
    repo_search_result_item-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    repo_search_result_item-description = mo_json->value_string( iv_prefix && '/description' ).
    repo_search_result_item-fork = mo_json->value_boolean( iv_prefix && '/fork' ).
    repo_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    repo_search_result_item-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    repo_search_result_item-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    repo_search_result_item-pushed_at = mo_json->value_string( iv_prefix && '/pushed_at' ).
    repo_search_result_item-homepage = mo_json->value_string( iv_prefix && '/homepage' ).
    repo_search_result_item-size = mo_json->value_string( iv_prefix && '/size' ).
    repo_search_result_item-stargazers_count = mo_json->value_string( iv_prefix && '/stargazers_count' ).
    repo_search_result_item-watchers_count = mo_json->value_string( iv_prefix && '/watchers_count' ).
    repo_search_result_item-language = mo_json->value_string( iv_prefix && '/language' ).
    repo_search_result_item-forks_count = mo_json->value_string( iv_prefix && '/forks_count' ).
    repo_search_result_item-open_issues_count = mo_json->value_string( iv_prefix && '/open_issues_count' ).
    repo_search_result_item-master_branch = mo_json->value_string( iv_prefix && '/master_branch' ).
    repo_search_result_item-default_branch = mo_json->value_string( iv_prefix && '/default_branch' ).
    repo_search_result_item-score = mo_json->value_string( iv_prefix && '/score' ).
    repo_search_result_item-forks_url = mo_json->value_string( iv_prefix && '/forks_url' ).
    repo_search_result_item-keys_url = mo_json->value_string( iv_prefix && '/keys_url' ).
    repo_search_result_item-collaborators_url = mo_json->value_string( iv_prefix && '/collaborators_url' ).
    repo_search_result_item-teams_url = mo_json->value_string( iv_prefix && '/teams_url' ).
    repo_search_result_item-hooks_url = mo_json->value_string( iv_prefix && '/hooks_url' ).
    repo_search_result_item-issue_events_url = mo_json->value_string( iv_prefix && '/issue_events_url' ).
    repo_search_result_item-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    repo_search_result_item-assignees_url = mo_json->value_string( iv_prefix && '/assignees_url' ).
    repo_search_result_item-branches_url = mo_json->value_string( iv_prefix && '/branches_url' ).
    repo_search_result_item-tags_url = mo_json->value_string( iv_prefix && '/tags_url' ).
    repo_search_result_item-blobs_url = mo_json->value_string( iv_prefix && '/blobs_url' ).
    repo_search_result_item-git_tags_url = mo_json->value_string( iv_prefix && '/git_tags_url' ).
    repo_search_result_item-git_refs_url = mo_json->value_string( iv_prefix && '/git_refs_url' ).
    repo_search_result_item-trees_url = mo_json->value_string( iv_prefix && '/trees_url' ).
    repo_search_result_item-statuses_url = mo_json->value_string( iv_prefix && '/statuses_url' ).
    repo_search_result_item-languages_url = mo_json->value_string( iv_prefix && '/languages_url' ).
    repo_search_result_item-stargazers_url = mo_json->value_string( iv_prefix && '/stargazers_url' ).
    repo_search_result_item-contributors_url = mo_json->value_string( iv_prefix && '/contributors_url' ).
    repo_search_result_item-subscribers_url = mo_json->value_string( iv_prefix && '/subscribers_url' ).
    repo_search_result_item-subscription_url = mo_json->value_string( iv_prefix && '/subscription_url' ).
    repo_search_result_item-commits_url = mo_json->value_string( iv_prefix && '/commits_url' ).
    repo_search_result_item-git_commits_url = mo_json->value_string( iv_prefix && '/git_commits_url' ).
    repo_search_result_item-comments_url = mo_json->value_string( iv_prefix && '/comments_url' ).
    repo_search_result_item-issue_comment_url = mo_json->value_string( iv_prefix && '/issue_comment_url' ).
    repo_search_result_item-contents_url = mo_json->value_string( iv_prefix && '/contents_url' ).
    repo_search_result_item-compare_url = mo_json->value_string( iv_prefix && '/compare_url' ).
    repo_search_result_item-merges_url = mo_json->value_string( iv_prefix && '/merges_url' ).
    repo_search_result_item-archive_url = mo_json->value_string( iv_prefix && '/archive_url' ).
    repo_search_result_item-downloads_url = mo_json->value_string( iv_prefix && '/downloads_url' ).
    repo_search_result_item-issues_url = mo_json->value_string( iv_prefix && '/issues_url' ).
    repo_search_result_item-pulls_url = mo_json->value_string( iv_prefix && '/pulls_url' ).
    repo_search_result_item-milestones_url = mo_json->value_string( iv_prefix && '/milestones_url' ).
    repo_search_result_item-notifications_url = mo_json->value_string( iv_prefix && '/notifications_url' ).
    repo_search_result_item-labels_url = mo_json->value_string( iv_prefix && '/labels_url' ).
    repo_search_result_item-releases_url = mo_json->value_string( iv_prefix && '/releases_url' ).
    repo_search_result_item-deployments_url = mo_json->value_string( iv_prefix && '/deployments_url' ).
    repo_search_result_item-git_url = mo_json->value_string( iv_prefix && '/git_url' ).
    repo_search_result_item-ssh_url = mo_json->value_string( iv_prefix && '/ssh_url' ).
    repo_search_result_item-clone_url = mo_json->value_string( iv_prefix && '/clone_url' ).
    repo_search_result_item-svn_url = mo_json->value_string( iv_prefix && '/svn_url' ).
    repo_search_result_item-forks = mo_json->value_string( iv_prefix && '/forks' ).
    repo_search_result_item-open_issues = mo_json->value_string( iv_prefix && '/open_issues' ).
    repo_search_result_item-watchers = mo_json->value_string( iv_prefix && '/watchers' ).
* todo, object, topics, array
    repo_search_result_item-mirror_url = mo_json->value_string( iv_prefix && '/mirror_url' ).
    repo_search_result_item-has_issues = mo_json->value_boolean( iv_prefix && '/has_issues' ).
    repo_search_result_item-has_projects = mo_json->value_boolean( iv_prefix && '/has_projects' ).
    repo_search_result_item-has_pages = mo_json->value_boolean( iv_prefix && '/has_pages' ).
    repo_search_result_item-has_wiki = mo_json->value_boolean( iv_prefix && '/has_wiki' ).
    repo_search_result_item-has_downloads = mo_json->value_boolean( iv_prefix && '/has_downloads' ).
    repo_search_result_item-archived = mo_json->value_boolean( iv_prefix && '/archived' ).
    repo_search_result_item-disabled = mo_json->value_boolean( iv_prefix && '/disabled' ).
* todo, object, license, 
* todo, object, permissions, object
* todo, object, text_matches, 
    repo_search_result_item-temp_clone_token = mo_json->value_string( iv_prefix && '/temp_clone_token' ).
    repo_search_result_item-allow_merge_commit = mo_json->value_boolean( iv_prefix && '/allow_merge_commit' ).
    repo_search_result_item-allow_squash_merge = mo_json->value_boolean( iv_prefix && '/allow_squash_merge' ).
    repo_search_result_item-allow_rebase_merge = mo_json->value_boolean( iv_prefix && '/allow_rebase_merge' ).
    repo_search_result_item-delete_branch_on_merge = mo_json->value_boolean( iv_prefix && '/delete_branch_on_merge' ).
  ENDMETHOD.

  METHOD parse_topic_search_result_item.
    topic_search_result_item-name = mo_json->value_string( iv_prefix && '/name' ).
    topic_search_result_item-display_name = mo_json->value_string( iv_prefix && '/display_name' ).
    topic_search_result_item-short_description = mo_json->value_string( iv_prefix && '/short_description' ).
    topic_search_result_item-description = mo_json->value_string( iv_prefix && '/description' ).
    topic_search_result_item-created_by = mo_json->value_string( iv_prefix && '/created_by' ).
    topic_search_result_item-released = mo_json->value_string( iv_prefix && '/released' ).
    topic_search_result_item-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    topic_search_result_item-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    topic_search_result_item-featured = mo_json->value_boolean( iv_prefix && '/featured' ).
    topic_search_result_item-curated = mo_json->value_boolean( iv_prefix && '/curated' ).
    topic_search_result_item-score = mo_json->value_string( iv_prefix && '/score' ).
    topic_search_result_item-repository_count = mo_json->value_string( iv_prefix && '/repository_count' ).
    topic_search_result_item-logo_url = mo_json->value_string( iv_prefix && '/logo_url' ).
* todo, object, text_matches, 
* todo, object, related, array
* todo, object, aliases, array
  ENDMETHOD.

  METHOD parse_user_search_result_item.
    user_search_result_item-login = mo_json->value_string( iv_prefix && '/login' ).
    user_search_result_item-id = mo_json->value_string( iv_prefix && '/id' ).
    user_search_result_item-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    user_search_result_item-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    user_search_result_item-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    user_search_result_item-url = mo_json->value_string( iv_prefix && '/url' ).
    user_search_result_item-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    user_search_result_item-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    user_search_result_item-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    user_search_result_item-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    user_search_result_item-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    user_search_result_item-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    user_search_result_item-type = mo_json->value_string( iv_prefix && '/type' ).
    user_search_result_item-score = mo_json->value_string( iv_prefix && '/score' ).
    user_search_result_item-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    user_search_result_item-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    user_search_result_item-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    user_search_result_item-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    user_search_result_item-public_repos = mo_json->value_string( iv_prefix && '/public_repos' ).
    user_search_result_item-public_gists = mo_json->value_string( iv_prefix && '/public_gists' ).
    user_search_result_item-followers = mo_json->value_string( iv_prefix && '/followers' ).
    user_search_result_item-following = mo_json->value_string( iv_prefix && '/following' ).
    user_search_result_item-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    user_search_result_item-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    user_search_result_item-name = mo_json->value_string( iv_prefix && '/name' ).
    user_search_result_item-bio = mo_json->value_string( iv_prefix && '/bio' ).
    user_search_result_item-email = mo_json->value_string( iv_prefix && '/email' ).
    user_search_result_item-location = mo_json->value_string( iv_prefix && '/location' ).
    user_search_result_item-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    user_search_result_item-hireable = mo_json->value_boolean( iv_prefix && '/hireable' ).
* todo, object, text_matches, 
    user_search_result_item-blog = mo_json->value_string( iv_prefix && '/blog' ).
    user_search_result_item-company = mo_json->value_string( iv_prefix && '/company' ).
    user_search_result_item-suspended_at = mo_json->value_string( iv_prefix && '/suspended_at' ).
  ENDMETHOD.

  METHOD parse_configuration_status.
    configuration_status-status = mo_json->value_string( iv_prefix && '/status' ).
* todo, object, progress, array
  ENDMETHOD.

  METHOD parse_maintenance_status.
    maintenance_status-status = mo_json->value_string( iv_prefix && '/status' ).
    maintenance_status-scheduled_time = mo_json->value_string( iv_prefix && '/scheduled_time' ).
* todo, object, connection_services, array
  ENDMETHOD.

  METHOD parse_enterprise_settings.
* todo, object, enterprise, object
* todo, object, run_list, array
  ENDMETHOD.

  METHOD parse_ssh_key.
    ssh_key-key = mo_json->value_string( iv_prefix && '/key' ).
    ssh_key-pretty_print = mo_json->value_string( iv_prefix && '/pretty-print' ).
  ENDMETHOD.

  METHOD parse_private_user.
    private_user-login = mo_json->value_string( iv_prefix && '/login' ).
    private_user-id = mo_json->value_string( iv_prefix && '/id' ).
    private_user-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    private_user-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    private_user-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    private_user-url = mo_json->value_string( iv_prefix && '/url' ).
    private_user-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    private_user-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    private_user-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    private_user-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    private_user-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    private_user-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    private_user-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    private_user-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    private_user-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    private_user-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    private_user-type = mo_json->value_string( iv_prefix && '/type' ).
    private_user-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    private_user-name = mo_json->value_string( iv_prefix && '/name' ).
    private_user-company = mo_json->value_string( iv_prefix && '/company' ).
    private_user-blog = mo_json->value_string( iv_prefix && '/blog' ).
    private_user-location = mo_json->value_string( iv_prefix && '/location' ).
    private_user-email = mo_json->value_string( iv_prefix && '/email' ).
    private_user-hireable = mo_json->value_boolean( iv_prefix && '/hireable' ).
    private_user-bio = mo_json->value_string( iv_prefix && '/bio' ).
    private_user-public_repos = mo_json->value_string( iv_prefix && '/public_repos' ).
    private_user-public_gists = mo_json->value_string( iv_prefix && '/public_gists' ).
    private_user-followers = mo_json->value_string( iv_prefix && '/followers' ).
    private_user-following = mo_json->value_string( iv_prefix && '/following' ).
    private_user-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    private_user-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
    private_user-private_gists = mo_json->value_string( iv_prefix && '/private_gists' ).
    private_user-total_private_repos = mo_json->value_string( iv_prefix && '/total_private_repos' ).
    private_user-owned_private_repos = mo_json->value_string( iv_prefix && '/owned_private_repos' ).
    private_user-disk_usage = mo_json->value_string( iv_prefix && '/disk_usage' ).
    private_user-collaborators = mo_json->value_string( iv_prefix && '/collaborators' ).
    private_user-two_factor_authentication = mo_json->value_boolean( iv_prefix && '/two_factor_authentication' ).
* todo, object, plan, object
    private_user-suspended_at = mo_json->value_string( iv_prefix && '/suspended_at' ).
    private_user-business_plus = mo_json->value_boolean( iv_prefix && '/business_plus' ).
    private_user-ldap_dn = mo_json->value_string( iv_prefix && '/ldap_dn' ).
  ENDMETHOD.

  METHOD parse_public_user.
    public_user-login = mo_json->value_string( iv_prefix && '/login' ).
    public_user-id = mo_json->value_string( iv_prefix && '/id' ).
    public_user-node_id = mo_json->value_string( iv_prefix && '/node_id' ).
    public_user-avatar_url = mo_json->value_string( iv_prefix && '/avatar_url' ).
    public_user-gravatar_id = mo_json->value_string( iv_prefix && '/gravatar_id' ).
    public_user-url = mo_json->value_string( iv_prefix && '/url' ).
    public_user-html_url = mo_json->value_string( iv_prefix && '/html_url' ).
    public_user-followers_url = mo_json->value_string( iv_prefix && '/followers_url' ).
    public_user-following_url = mo_json->value_string( iv_prefix && '/following_url' ).
    public_user-gists_url = mo_json->value_string( iv_prefix && '/gists_url' ).
    public_user-starred_url = mo_json->value_string( iv_prefix && '/starred_url' ).
    public_user-subscriptions_url = mo_json->value_string( iv_prefix && '/subscriptions_url' ).
    public_user-organizations_url = mo_json->value_string( iv_prefix && '/organizations_url' ).
    public_user-repos_url = mo_json->value_string( iv_prefix && '/repos_url' ).
    public_user-events_url = mo_json->value_string( iv_prefix && '/events_url' ).
    public_user-received_events_url = mo_json->value_string( iv_prefix && '/received_events_url' ).
    public_user-type = mo_json->value_string( iv_prefix && '/type' ).
    public_user-site_admin = mo_json->value_boolean( iv_prefix && '/site_admin' ).
    public_user-name = mo_json->value_string( iv_prefix && '/name' ).
    public_user-company = mo_json->value_string( iv_prefix && '/company' ).
    public_user-blog = mo_json->value_string( iv_prefix && '/blog' ).
    public_user-location = mo_json->value_string( iv_prefix && '/location' ).
    public_user-email = mo_json->value_string( iv_prefix && '/email' ).
    public_user-hireable = mo_json->value_boolean( iv_prefix && '/hireable' ).
    public_user-bio = mo_json->value_string( iv_prefix && '/bio' ).
    public_user-public_repos = mo_json->value_string( iv_prefix && '/public_repos' ).
    public_user-public_gists = mo_json->value_string( iv_prefix && '/public_gists' ).
    public_user-followers = mo_json->value_string( iv_prefix && '/followers' ).
    public_user-following = mo_json->value_string( iv_prefix && '/following' ).
    public_user-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    public_user-updated_at = mo_json->value_string( iv_prefix && '/updated_at' ).
* todo, object, plan, object
    public_user-suspended_at = mo_json->value_string( iv_prefix && '/suspended_at' ).
    public_user-private_gists = mo_json->value_string( iv_prefix && '/private_gists' ).
    public_user-total_private_repos = mo_json->value_string( iv_prefix && '/total_private_repos' ).
    public_user-owned_private_repos = mo_json->value_string( iv_prefix && '/owned_private_repos' ).
    public_user-disk_usage = mo_json->value_string( iv_prefix && '/disk_usage' ).
    public_user-collaborators = mo_json->value_string( iv_prefix && '/collaborators' ).
  ENDMETHOD.

  METHOD parse_email.
    email-email = mo_json->value_string( iv_prefix && '/email' ).
    email-primary = mo_json->value_boolean( iv_prefix && '/primary' ).
    email-verified = mo_json->value_boolean( iv_prefix && '/verified' ).
    email-visibility = mo_json->value_string( iv_prefix && '/visibility' ).
  ENDMETHOD.

  METHOD parse_gpg_key.
    gpg_key-id = mo_json->value_string( iv_prefix && '/id' ).
    gpg_key-primary_key_id = mo_json->value_string( iv_prefix && '/primary_key_id' ).
    gpg_key-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    gpg_key-public_key = mo_json->value_string( iv_prefix && '/public_key' ).
* todo, object, emails, array
* todo, object, subkeys, array
    gpg_key-can_sign = mo_json->value_boolean( iv_prefix && '/can_sign' ).
    gpg_key-can_encrypt_comms = mo_json->value_boolean( iv_prefix && '/can_encrypt_comms' ).
    gpg_key-can_encrypt_storage = mo_json->value_boolean( iv_prefix && '/can_encrypt_storage' ).
    gpg_key-can_certify = mo_json->value_boolean( iv_prefix && '/can_certify' ).
    gpg_key-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    gpg_key-expires_at = mo_json->value_string( iv_prefix && '/expires_at' ).
    gpg_key-raw_key = mo_json->value_string( iv_prefix && '/raw_key' ).
  ENDMETHOD.

  METHOD parse_key.
    key-key_id = mo_json->value_string( iv_prefix && '/key_id' ).
    key-key = mo_json->value_string( iv_prefix && '/key' ).
    key-id = mo_json->value_string( iv_prefix && '/id' ).
    key-url = mo_json->value_string( iv_prefix && '/url' ).
    key-title = mo_json->value_string( iv_prefix && '/title' ).
    key-created_at = mo_json->value_string( iv_prefix && '/created_at' ).
    key-verified = mo_json->value_boolean( iv_prefix && '/verified' ).
    key-read_only = mo_json->value_boolean( iv_prefix && '/read_only' ).
  ENDMETHOD.

  METHOD parse_starred_repository.
    starred_repository-starred_at = mo_json->value_string( iv_prefix && '/starred_at' ).
* todo, object, repo, 
  ENDMETHOD.

  METHOD parse_hovercard.
* todo, object, contexts, array
  ENDMETHOD.

  METHOD parse_key_simple.
    key_simple-id = mo_json->value_string( iv_prefix && '/id' ).
    key_simple-key = mo_json->value_string( iv_prefix && '/key' ).
  ENDMETHOD.

  METHOD zif_ghes221~meta_root.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_global_w.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks'.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_global.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_global_we.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks/{hook_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_global_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_global.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks/{hook_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_global_hook_2( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_global.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks/{hook_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_ping_global_w.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks/{hook_id}/pings'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_public_k.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/keys'.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_public.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/keys/{key_ids}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_ldap_m.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/ldap/teams/{team_id}/mapping'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_ldap_mapping_team( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_sync_ldap_map.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/ldap/teams/{team_id}/sync'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_ldap01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/ldap/users/{username}/mapping'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_ldap_mapping_user( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_sync_ldap_m01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/ldap/users/{username}/sync'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/organizations'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_org_na.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/organizations/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_pre_rece.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments'.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_pre_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_pre_recei.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments/{pre_receive_environment_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pre_receive_environment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_pre_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments/{pre_receive_environment_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pre_receive_environment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_pre_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments/{pre_receive_environment_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_start_pre_rec.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments/{pre_receive_environment_id}/downloads'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_download_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pre_receive_environment_( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_pre_re01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-hooks'.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_pre_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-hooks'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_pre_rec01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-hooks/{pre_receive_hook_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pre_receive_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_pre_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-hooks/{pre_receive_hook_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pre_receive_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_pre_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-hooks/{pre_receive_hook_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_personal.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/tokens'.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_person.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/tokens/{token_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/users'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_userna.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/users/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/users/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_impers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/users/{username}/authorizations'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_impers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/users/{username}/authorizations'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_integration( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_create_from_manifest.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app-manifests/{code}/conversions'.
    REPLACE ALL OCCURRENCES OF '{code}' IN lv_uri WITH code.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_list_installations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app/installations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app/installations/{installation_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation_ghes_2( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_delete_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app/installations/{installation_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_create_installation_acces.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app/installations/{installation_id}/access_tokens'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_list_gran.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/grants'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_get_grant.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/grants/{grant_id}'.
    REPLACE ALL OCCURRENCES OF '{grant_id}' IN lv_uri WITH grant_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_application_grant( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_delete_gr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/grants/{grant_id}'.
    REPLACE ALL OCCURRENCES OF '{grant_id}' IN lv_uri WITH grant_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_delete_authorization.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/grant'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_revoke_grant_for_applicat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/grants/{access_token}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_check_token.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/token'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_reset_token.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/token'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_delete_token.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/token'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_check_authorization.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_reset_authorization.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_revoke_authorization_for_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_by_slug.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/apps/{app_slug}'.
    REPLACE ALL OCCURRENCES OF '{app_slug}' IN lv_uri WITH app_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_integration( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_list_auth.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_create_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_get_or_cr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations/clients/{client_id}'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_get_or_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations/clients/{client_id}/{fingerprint}'.
    REPLACE ALL OCCURRENCES OF '{fingerprint}' IN lv_uri WITH fingerprint.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_get_autho.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_update_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_delete_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~codes_of_conduct_get_all_codes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/codes_of_conduct'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~codes_of_conduct_get_conduct_c.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/codes_of_conduct/{key}'.
    REPLACE ALL OCCURRENCES OF '{key}' IN lv_uri WITH key.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_code_of_conduct( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_create_content_attachment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/content_references/{content_reference_id}/attachments'.
    REPLACE ALL OCCURRENCES OF '{content_reference_id}' IN lv_uri WITH content_reference_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_content_reference_attach( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~emojis_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/emojis'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_license_i.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/enterprise/settings/license'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_license_info( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_type_stat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/enterprise/stats/{type}'.
    REPLACE ALL OCCURRENCES OF '{type}' IN lv_uri WITH type.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_enterprise_overview( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_public_events.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/events'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_get_feeds.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/feeds'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_feed( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gists_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_public.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/public'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_starred.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/starred'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_simple( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gists_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_simple( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gists_delete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_create_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_get_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gists_update_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gists_delete_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/commits'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_forks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/forks'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_fork.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/forks'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_check_is_starred.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_star.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_unstar.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_get_revision.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/{sha}'.
    REPLACE ALL OCCURRENCES OF '{sha}' IN lv_uri WITH sha.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_simple( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gitignore_get_all_templates.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gitignore/templates'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gitignore_get_template.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gitignore/templates/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gitignore_template( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_list_repos_accessible_to_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/installation/repositories'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_revoke_installation_acces.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/installation/token'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/issues'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF collab IS SUPPLIED.
      mi_client->request->set_form_field( name = 'collab' value = collab ).
    ENDIF.
    IF orgs IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orgs' value = orgs ).
    ENDIF.
    IF owned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'owned' value = owned ).
    ENDIF.
    IF pulls IS SUPPLIED.
      mi_client->request->set_form_field( name = 'pulls' value = pulls ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~licenses_get_all_commonly_used.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/licenses'.
    IF featured IS SUPPLIED.
      mi_client->request->set_form_field( name = 'featured' value = featured ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~licenses_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/licenses/{license}'.
    REPLACE ALL OCCURRENCES OF '{license}' IN lv_uri WITH license.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_license( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~markdown_render.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/markdown'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~markdown_render_raw.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/markdown/raw'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~meta_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/meta'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_api_overview( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_public_events_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/networks/{owner}/{repo}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_notifications_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications'.
    IF all IS SUPPLIED.
      mi_client->request->set_form_field( name = 'all' value = all ).
    ENDIF.
    IF participating IS SUPPLIED.
      mi_client->request->set_form_field( name = 'participating' value = participating ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_mark_notifications_as.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_get_thread.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications/threads/{thread_id}'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_thread( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_mark_thread_as_read.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications/threads/{thread_id}'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_get_thread_subscripti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_thread_subscription( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_set_thread_subscripti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_thread_subscription( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_delete_thread_subscri.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~meta_get_octocat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/octocat'.
    IF s IS SUPPLIED.
      mi_client->request->set_form_field( name = 's' value = s ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/organizations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_organization_full( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_organization_full( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_public_org_event.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/events'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_webhooks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_create_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_get_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_update_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_delete_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_ping_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks/{hook_id}/pings'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_org_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/installation'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation_ghes_2( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_app_installations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/installations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/issues'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_members.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_check_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_remove_member.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_get_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_set_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_remove_membership_for_use.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_outside_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/outside_collaborators'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_convert_member_to_outside.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/outside_collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_remove_outside_collaborat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/outside_collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_pre_re02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/pre-receive-hooks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_pre_rec02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_pre_receive_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_pre_02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_pre_receive_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_remove_pre_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_pre_receive_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_create_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_public_members.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/public_members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_check_public_membership_f.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_set_public_membership_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_remove_public_membership_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_by_name.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_full( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_discussions_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_create_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_discussion_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_create_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_discussion_comment_i.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_team_discus.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_team_disc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_team_disc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_team_disc01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_team_di01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_team_di01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_members_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_membership_for_user_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_membership.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_membership_for_us.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_projects_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_check_permissions_for_pr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_project( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_project_pe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_project_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_repos_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_check_permissions_for_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_repo_permi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_repo_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_child_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_get_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_card( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_update_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_card( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_delete_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_move_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/cards/{card_id}/moves'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_get_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_column( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_update_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_column( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_delete_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_cards.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}/cards'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    IF archived_state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'archived_state' value = archived_state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_create_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}/cards'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_move_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}/moves'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_delete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_collaborators.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/collaborators'.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_add_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_remove_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_get_permission_for_us.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/collaborators/{username}/permission'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_collaborator_( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_columns.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/columns'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_create_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/columns'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~rate_limit_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/rate_limit'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_rate_limit_overview( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/reactions/{reaction_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_full_repository( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_full_repository( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_assignees.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_check_user_can_be_assig.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/assignees/{assignee}'.
    REPLACE ALL OCCURRENCES OF '{assignee}' IN lv_uri WITH assignee.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_branches.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF protected IS SUPPLIED.
      mi_client->request->set_form_field( name = 'protected' value = protected ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_branch.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_branch_with_protection( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_branch_protection( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_admin_branch_protect.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_set_admin_branch_protect.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_admin_branch_prot.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_pull_request_review_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_pull_request_revi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_pull_re( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_pull_request_revi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_commit_signature_pro.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_commit_signature_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_commit_signature_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_status_checks_protec.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_status_check_policy( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_status_check_prot.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_status_check_policy( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_status_check_prot.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_all_status_check_con.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_add_status_check_context.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_set_status_check_context.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_status_check_cont.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_access_restrictions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_branch_restriction_polic( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_access_restrictio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_apps_with_access_to_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_add_app_access_restricti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_set_app_access_restricti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_app_access_restri.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_teams_with_access_to.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_add_team_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_set_team_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_team_access_restr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_users_with_access_to.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_add_user_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_set_user_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_user_access_restr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-runs/{check_run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_run( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~checks_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-runs/{check_run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_run( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~checks_list_annotations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_create_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-suites'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_set_suites_preferences.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-suites/preferences'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_suite_preference( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~checks_get_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-suites/{check_suite_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_suite( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~checks_list_for_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_rerequest_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_collaborators.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/collaborators'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_check_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_add_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_collaborator_permiss.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/collaborators/{username}/permission'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_collaborator_( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_commit_comments_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_commit_comm.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_commit_co.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_reaction( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_commit_co.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sha IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sha' value = sha ).
    ENDIF.
    IF path IS SUPPLIED.
      mi_client->request->set_form_field( name = 'path' value = path ).
    ENDIF.
    IF author IS SUPPLIED.
      mi_client->request->set_form_field( name = 'author' value = author ).
    ENDIF.
    IF until IS SUPPLIED.
      mi_client->request->set_form_field( name = 'until' value = until ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_branches_for_head_c.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_comments_for_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{commit_sha}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{commit_sha}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_pull_requests_assoc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{commit_sha}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~checks_list_for_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{ref}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_list_suites_for_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{ref}/check-suites'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF app_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'app_id' value = app_id ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_combined_status_for_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{ref}/status'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_combined_commit_status( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_commit_statuses_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{ref}/statuses'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~codes_of_conduct_get_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/community/code_of_conduct'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_code_of_conduct( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_compare_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/compare/{base}...{head}'.
    REPLACE ALL OCCURRENCES OF '{base}' IN lv_uri WITH base.
    REPLACE ALL OCCURRENCES OF '{head}' IN lv_uri WITH head.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit_comparison( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_content.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_or_update_file_co.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_file_commit( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_file.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_file_commit( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_contributors.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/contributors'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF anon IS SUPPLIED.
      mi_client->request->set_form_field( name = 'anon' value = anon ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_deployments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sha IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sha' value = sha ).
    ENDIF.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    IF task IS SUPPLIED.
      mi_client->request->set_form_field( name = 'task' value = task ).
    ENDIF.
    IF environment IS SUPPLIED.
      mi_client->request->set_form_field( name = 'environment' value = environment ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_deployment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_deployment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments/{deployment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_deployment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_deployment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments/{deployment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_deployment_statuses.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments/{deployment_id}/statuses'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_deployment_status.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments/{deployment_id}/statuses'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_deployment_status.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}'.
    REPLACE ALL OCCURRENCES OF '{status_id}' IN lv_uri WITH status_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_deployment_status( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_dispatch_event.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/dispatches'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_repo_events.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_forks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/forks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_fork.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/forks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_create_blob.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/blobs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_get_blob.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/blobs/{file_sha}'.
    REPLACE ALL OCCURRENCES OF '{file_sha}' IN lv_uri WITH file_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_blob( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~git_create_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_get_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/commits/{commit_sha}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_commit( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~git_list_matching_refs.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/matching-refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_get_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/ref/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_ref( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~git_create_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/refs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_update_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_ref( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~git_delete_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_create_tag.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/tags'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_get_tag.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/tags/{tag_sha}'.
    REPLACE ALL OCCURRENCES OF '{tag_sha}' IN lv_uri WITH tag_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_tag( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~git_create_tree.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/trees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_get_tree.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/trees/{tree_sha}'.
    REPLACE ALL OCCURRENCES OF '{tree_sha}' IN lv_uri WITH tree_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF recursive IS SUPPLIED.
      mi_client->request->set_form_field( name = 'recursive' value = recursive ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_tree( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_webhooks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_ping_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks/{hook_id}/pings'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_test_push_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks/{hook_id}/tests'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_repo_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/installation'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation_ghes_2( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_invitations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/invitations'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_invitation( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF milestone IS SUPPLIED.
      mi_client->request->set_form_field( name = 'milestone' value = milestone ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF assignee IS SUPPLIED.
      mi_client->request->set_form_field( name = 'assignee' value = assignee ).
    ENDIF.
    IF creator IS SUPPLIED.
      mi_client->request->set_form_field( name = 'creator' value = creator ).
    ENDIF.
    IF mentioned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'mentioned' value = mentioned ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_comments_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_get_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_update_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_delete_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_issue_comme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_issue_com.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_reaction( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_issue_com.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_events_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_get_event.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/events/{event_id}'.
    REPLACE ALL OCCURRENCES OF '{event_id}' IN lv_uri WITH event_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_event( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_add_assignees.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_remove_assignees.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_simple( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_create_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_events.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_labels_on_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_add_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_set_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_remove_all_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_remove_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_lock.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/lock'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_unlock.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/lock'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_events_for_timelin.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/timeline'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_deploy_keys.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/keys'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/keys'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_deploy_key( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_labels_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_create_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_get_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_label( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_update_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_label( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_delete_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_languages.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/languages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_language( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~licenses_get_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/license'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_license_content( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_merge.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/merges'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_milestones.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_create_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_get_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_milestone( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_update_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_milestone( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_delete_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_labels_for_milesto.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones/{milestone_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_repo_notificatio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/notifications'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF all IS SUPPLIED.
      mi_client->request->set_form_field( name = 'all' value = all ).
    ENDIF.
    IF participating IS SUPPLIED.
      mi_client->request->set_form_field( name = 'participating' value = participating ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_mark_repo_notificatio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/notifications'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_pages.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_page( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_pages_site.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_information_about.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_pages_site.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_pages_builds.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages/builds'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_request_pages_build.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages/builds'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_latest_pages_build.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages/builds/latest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_page_build( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_pages_build.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages/builds/{build_id}'.
    REPLACE ALL OCCURRENCES OF '{build_id}' IN lv_uri WITH build_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_page_build( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_pre_re03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pre-receive-hooks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_pre_rec03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_pre_receive_h( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_pre_03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_pre_receive_h( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_remove_pre_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_pre_receive_h( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/projects'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_create_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/projects'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF head IS SUPPLIED.
      mi_client->request->set_form_field( name = 'head' value = head ).
    ENDIF.
    IF base IS SUPPLIED.
      mi_client->request->set_form_field( name = 'base' value = base ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_review_comments_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_get_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review_comm( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_update_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review_comm( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_delete_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_pull_reques.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_pull_requ.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_reaction( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_pull_requ.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_review_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_create_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_create_reply_for_review_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_files.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/files'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_check_if_merged.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/merge'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_merge.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/merge'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_merge_resul( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_requested_reviewers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review_requ( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_request_reviewers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_remove_requested_reviewe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_reviews.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_create_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_get_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_update_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_delete_pending_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_comments_for_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_dismiss_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_submit_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_update_branch.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/update-branch'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_readme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/readme'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_content_file( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_releases.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release_asset( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release_asset( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_latest_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/latest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_release_by_tag.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/tags/{tag}'.
    REPLACE ALL OCCURRENCES OF '{tag}' IN lv_uri WITH tag.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_release_assets.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/{release_id}/assets'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_upload_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/{release_id}/assets'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    IF name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'name' value = name ).
    ENDIF.
    IF label IS SUPPLIED.
      mi_client->request->set_form_field( name = 'label' value = label ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_stargazers_for_r.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stargazers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_code_frequency_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stats/code_frequency'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_commit_activity_stat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stats/commit_activity'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_contributors_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stats/contributors'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_participation_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stats/participation'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_participation_stats( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_punch_card_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stats/punch_card'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_commit_status.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/statuses/{sha}'.
    REPLACE ALL OCCURRENCES OF '{sha}' IN lv_uri WITH sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_watchers_for_rep.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/subscribers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_get_repo_subscription.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_subscription( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_set_repo_subscription.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_subscription( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_delete_repo_subscript.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_tags.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/tags'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_download_tarball_archive.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/tarball/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_teams.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_all_topics.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/topics'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_topic( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_replace_all_topics.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/topics'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_topic( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_transfer.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/transfer'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_enable_vulnerability_ale.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/vulnerability-alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_disable_vulnerability_al.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/vulnerability-alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_download_zipball_archive.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/zipball/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_using_template.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{template_owner}/{template_repo}/generate'.
    REPLACE ALL OCCURRENCES OF '{template_owner}' IN lv_uri WITH template_owner.
    REPLACE ALL OCCURRENCES OF '{template_repo}' IN lv_uri WITH template_repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_public.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repositories'.
    IF visibility IS SUPPLIED.
      mi_client->request->set_form_field( name = 'visibility' value = visibility ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_code.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/code'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/commits'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_issues_and_pull_request.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/issues'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/labels'.
    mi_client->request->set_form_field( name = 'repository_id' value = repository_id ).
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_repos.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/repositories'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_topics.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/topics'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_users.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/users'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_configura.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/configcheck'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_configuration_status( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_start_configu.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/configure'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_maintenan.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/maintenance'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_maintenance_status( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_enable_or_dis.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/maintenance'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_maintenance_status( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_settings.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/settings'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_enterprise_settings( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_set_settings.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/settings'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_all_autho.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/settings/authorized-keys'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_add_authorize.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/settings/authorized-keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_remove_author.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/settings/authorized-keys'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_enterp.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/start'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_upgrade_licen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/upgrade'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_full( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_discussions_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions'.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_create_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_discussion_commen01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments'.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_create_discussion_comm01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_discussion_comment_l.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_discussion_comm01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_discussion_comm01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_team_disc02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_team_di02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_team_disc03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/reactions'.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_team_di03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/reactions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_members_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/members'.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_member_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_member_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_member_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_membership_for_use01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_membersh01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_membership_for_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_projects_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/projects'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_check_permissions_for_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_project( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_project_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_project_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_repos_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/repos'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_check_permissions_for_02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_repo_per01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_repo_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_child_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/teams'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_get_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_update_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_private_user( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~users_list_emails_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/emails'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_add_email_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/emails'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_delete_email_for_authent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/emails'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_followers_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/followers'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_followed_by_authent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/following'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_check_person_is_followed.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_follow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_unfollow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_gpg_keys_for_authen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/gpg_keys'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_create_gpg_key_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/gpg_keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_get_gpg_key_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/gpg_keys/{gpg_key_id}'.
    REPLACE ALL OCCURRENCES OF '{gpg_key_id}' IN lv_uri WITH gpg_key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gpg_key( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~users_delete_gpg_key_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/gpg_keys/{gpg_key_id}'.
    REPLACE ALL OCCURRENCES OF '{gpg_key_id}' IN lv_uri WITH gpg_key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_list_installations_for_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/installations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_list_installation_repos_f.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/installations/{installation_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_add_repo_to_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/installations/{installation_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_remove_repo_from_installa.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/installations/{installation_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_for_authenticated_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/issues'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_public_ssh_keys_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/keys'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_create_public_ssh_key_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_get_public_ssh_key_for_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_key( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~users_delete_public_ssh_key_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_memberships_for_auth.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/memberships/orgs'.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_get_membership_for_authen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/memberships/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_update_membership_for_aut.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/memberships/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_for_authenticated_us.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/orgs'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_create_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/projects'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_public_emails_for_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/public_emails'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_for_authenticated_u.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/repos'.
    IF visibility IS SUPPLIED.
      mi_client->request->set_form_field( name = 'visibility' value = visibility ).
    ENDIF.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_for_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/repos'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_invitations_for_aut.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/repository_invitations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_accept_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/repository_invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_decline_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/repository_invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_repos_starred_by.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/starred'.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_check_repo_is_starred.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_star_repo_for_authent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_unstar_repo_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_watched_repos_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/subscriptions'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_for_authenticated_u.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/teams'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_get_by_username.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_events_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/events'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_org_events_for_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/events/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_public_events_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/events/public'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_followers_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/followers'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_following_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/following'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_check_following_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/following/{target_user}'.
    REPLACE ALL OCCURRENCES OF '{target_user}' IN lv_uri WITH target_user.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/gists'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_gpg_keys_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/gpg_keys'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_get_context_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/hovercard'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF subject_type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'subject_type' value = subject_type ).
    ENDIF.
    IF subject_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'subject_id' value = subject_id ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_hovercard( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_user_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/installation'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation_ghes_2( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~users_list_public_keys_for_use.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/keys'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/orgs'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/projects'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_received_events_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/received_events'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_received_public_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/received_events/public'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/repos'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_promote_user_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/site_admin'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_demote_site_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/site_admin'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_repos_starred_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/starred'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_repos_watched_by.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/subscriptions'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_suspend_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/suspended'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_unsuspend_use.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/suspended'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~meta_get_zen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/zen'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

ENDCLASS.