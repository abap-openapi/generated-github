CLASS zcl_ghes221 DEFINITION PUBLIC.
* Generated by abap-openapi-client
* GitHub v3 REST API
  PUBLIC SECTION.
    INTERFACES zif_ghes221.
    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client.
  PROTECTED SECTION.
    DATA mi_client TYPE REF TO if_http_client.
    DATA mo_json TYPE REF TO zcl_oapi_json.
    METHODS send_receive RETURNING VALUE(rv_code) TYPE i.
    METHODS parse_global_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(global_hook) TYPE zif_ghes221=>global_hook
      RAISING cx_static_check.
    METHODS parse_global_hook_2
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(global_hook_2) TYPE zif_ghes221=>global_hook_2
      RAISING cx_static_check.
    METHODS parse_enterprise_public_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enterprise_public_key) TYPE zif_ghes221=>enterprise_public_key
      RAISING cx_static_check.
    METHODS parse_ldap_mapping_team
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(ldap_mapping_team) TYPE zif_ghes221=>ldap_mapping_team
      RAISING cx_static_check.
    METHODS parse_ldap_mapping_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(ldap_mapping_user) TYPE zif_ghes221=>ldap_mapping_user
      RAISING cx_static_check.
    METHODS parse_organization_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_simple) TYPE zif_ghes221=>organization_simple
      RAISING cx_static_check.
    METHODS parse_pre_receive_environment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pre_receive_environment) TYPE zif_ghes221=>pre_receive_environment
      RAISING cx_static_check.
    METHODS parse_pre_receive_environment_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pre_receive_environment_downlo) TYPE zif_ghes221=>pre_receive_environment_downlo
      RAISING cx_static_check.
    METHODS parse_pre_receive_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pre_receive_hook) TYPE zif_ghes221=>pre_receive_hook
      RAISING cx_static_check.
    METHODS parse_simple_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_user) TYPE zif_ghes221=>simple_user
      RAISING cx_static_check.
    METHODS parse_app_permissions
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(app_permissions) TYPE zif_ghes221=>app_permissions
      RAISING cx_static_check.
    METHODS parse_scoped_installation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scoped_installation) TYPE zif_ghes221=>scoped_installation
      RAISING cx_static_check.
    METHODS parse_authorization
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(authorization) TYPE zif_ghes221=>authorization
      RAISING cx_static_check.
    METHODS parse_integration
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(integration) TYPE zif_ghes221=>integration
      RAISING cx_static_check.
    METHODS parse_basic_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(basic_error) TYPE zif_ghes221=>basic_error
      RAISING cx_static_check.
    METHODS parse_validation_error_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(validation_error_simple) TYPE zif_ghes221=>validation_error_simple
      RAISING cx_static_check.
    METHODS parse_enterprise
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enterprise) TYPE zif_ghes221=>enterprise
      RAISING cx_static_check.
    METHODS parse_installation_ghes_2
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(installation_ghes_2) TYPE zif_ghes221=>installation_ghes_2
      RAISING cx_static_check.
    METHODS parse_license_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license_simple) TYPE zif_ghes221=>license_simple
      RAISING cx_static_check.
    METHODS parse_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository) TYPE zif_ghes221=>repository
      RAISING cx_static_check.
    METHODS parse_installation_token
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(installation_token) TYPE zif_ghes221=>installation_token
      RAISING cx_static_check.
    METHODS parse_validation_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(validation_error) TYPE zif_ghes221=>validation_error
      RAISING cx_static_check.
    METHODS parse_application_grant
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(application_grant) TYPE zif_ghes221=>application_grant
      RAISING cx_static_check.
    METHODS parse_code_of_conduct
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_of_conduct) TYPE zif_ghes221=>code_of_conduct
      RAISING cx_static_check.
    METHODS parse_content_reference_attach
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_reference_attachment) TYPE zif_ghes221=>content_reference_attachment
      RAISING cx_static_check.
    METHODS parse_license_info
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license_info) TYPE zif_ghes221=>license_info
      RAISING cx_static_check.
    METHODS parse_enterprise_overview
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enterprise_overview) TYPE zif_ghes221=>enterprise_overview
      RAISING cx_static_check.
    METHODS parse_actor
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(actor) TYPE zif_ghes221=>actor
      RAISING cx_static_check.
    METHODS parse_label
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(label) TYPE zif_ghes221=>label
      RAISING cx_static_check.
    METHODS parse_milestone
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(milestone) TYPE zif_ghes221=>milestone
      RAISING cx_static_check.
    METHODS parse_author_association
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(author_association) TYPE zif_ghes221=>author_association
      RAISING cx_static_check.
    METHODS parse_issue_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_simple) TYPE zif_ghes221=>issue_simple
      RAISING cx_static_check.
    METHODS parse_reaction_rollup
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(reaction_rollup) TYPE zif_ghes221=>reaction_rollup
      RAISING cx_static_check.
    METHODS parse_issue_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_comment) TYPE zif_ghes221=>issue_comment
      RAISING cx_static_check.
    METHODS parse_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(event) TYPE zif_ghes221=>event
      RAISING cx_static_check.
    METHODS parse_link_with_type
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(link_with_type) TYPE zif_ghes221=>link_with_type
      RAISING cx_static_check.
    METHODS parse_feed
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(feed) TYPE zif_ghes221=>feed
      RAISING cx_static_check.
    METHODS parse_base_gist
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(base_gist) TYPE zif_ghes221=>base_gist
      RAISING cx_static_check.
    METHODS parse_gist_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_simple) TYPE zif_ghes221=>gist_simple
      RAISING cx_static_check.
    METHODS parse_gist_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_comment) TYPE zif_ghes221=>gist_comment
      RAISING cx_static_check.
    METHODS parse_gist_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gist_commit) TYPE zif_ghes221=>gist_commit
      RAISING cx_static_check.
    METHODS parse_gitignore_template
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gitignore_template) TYPE zif_ghes221=>gitignore_template
      RAISING cx_static_check.
    METHODS parse_issue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue) TYPE zif_ghes221=>issue
      RAISING cx_static_check.
    METHODS parse_license
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license) TYPE zif_ghes221=>license
      RAISING cx_static_check.
    METHODS parse_api_overview
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(api_overview) TYPE zif_ghes221=>api_overview
      RAISING cx_static_check.
    METHODS parse_minimal_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(minimal_repository) TYPE zif_ghes221=>minimal_repository
      RAISING cx_static_check.
    METHODS parse_thread
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(thread) TYPE zif_ghes221=>thread
      RAISING cx_static_check.
    METHODS parse_thread_subscription
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(thread_subscription) TYPE zif_ghes221=>thread_subscription
      RAISING cx_static_check.
    METHODS parse_organization_full
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(organization_full) TYPE zif_ghes221=>organization_full
      RAISING cx_static_check.
    METHODS parse_org_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(org_hook) TYPE zif_ghes221=>org_hook
      RAISING cx_static_check.
    METHODS parse_webhook_config_url
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_url) TYPE zif_ghes221=>webhook_config_url
      RAISING cx_static_check.
    METHODS parse_webhook_config_content_t
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_content_type) TYPE zif_ghes221=>webhook_config_content_type
      RAISING cx_static_check.
    METHODS parse_webhook_config_secret
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_secret) TYPE zif_ghes221=>webhook_config_secret
      RAISING cx_static_check.
    METHODS parse_webhook_config_insecure_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(webhook_config_insecure_ssl) TYPE zif_ghes221=>webhook_config_insecure_ssl
      RAISING cx_static_check.
    METHODS parse_org_membership
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(org_membership) TYPE zif_ghes221=>org_membership
      RAISING cx_static_check.
    METHODS parse_org_pre_receive_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(org_pre_receive_hook) TYPE zif_ghes221=>org_pre_receive_hook
      RAISING cx_static_check.
    METHODS parse_project
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project) TYPE zif_ghes221=>project
      RAISING cx_static_check.
    METHODS parse_team_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_simple) TYPE zif_ghes221=>team_simple
      RAISING cx_static_check.
    METHODS parse_team
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team) TYPE zif_ghes221=>team
      RAISING cx_static_check.
    METHODS parse_team_full
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_full) TYPE zif_ghes221=>team_full
      RAISING cx_static_check.
    METHODS parse_team_discussion
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_discussion) TYPE zif_ghes221=>team_discussion
      RAISING cx_static_check.
    METHODS parse_team_discussion_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_discussion_comment) TYPE zif_ghes221=>team_discussion_comment
      RAISING cx_static_check.
    METHODS parse_reaction
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(reaction) TYPE zif_ghes221=>reaction
      RAISING cx_static_check.
    METHODS parse_team_membership
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_membership) TYPE zif_ghes221=>team_membership
      RAISING cx_static_check.
    METHODS parse_team_project
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_project) TYPE zif_ghes221=>team_project
      RAISING cx_static_check.
    METHODS parse_team_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(team_repository) TYPE zif_ghes221=>team_repository
      RAISING cx_static_check.
    METHODS parse_project_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project_card) TYPE zif_ghes221=>project_card
      RAISING cx_static_check.
    METHODS parse_project_column
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(project_column) TYPE zif_ghes221=>project_column
      RAISING cx_static_check.
    METHODS parse_repository_collaborator_
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_collaborator_permis) TYPE zif_ghes221=>repository_collaborator_permis
      RAISING cx_static_check.
    METHODS parse_rate_limit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(rate_limit) TYPE zif_ghes221=>rate_limit
      RAISING cx_static_check.
    METHODS parse_rate_limit_overview
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(rate_limit_overview) TYPE zif_ghes221=>rate_limit_overview
      RAISING cx_static_check.
    METHODS parse_full_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(full_repository) TYPE zif_ghes221=>full_repository
      RAISING cx_static_check.
    METHODS parse_protected_branch_admin_e
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch_admin_enforce) TYPE zif_ghes221=>protected_branch_admin_enforce
      RAISING cx_static_check.
    METHODS parse_protected_branch_pull_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch_pull_request_) TYPE zif_ghes221=>protected_branch_pull_request_
      RAISING cx_static_check.
    METHODS parse_branch_restriction_polic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_restriction_policy) TYPE zif_ghes221=>branch_restriction_policy
      RAISING cx_static_check.
    METHODS parse_branch_protection
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_protection) TYPE zif_ghes221=>branch_protection
      RAISING cx_static_check.
    METHODS parse_short_branch
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(short_branch) TYPE zif_ghes221=>short_branch
      RAISING cx_static_check.
    METHODS parse_git_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_user) TYPE zif_ghes221=>git_user
      RAISING cx_static_check.
    METHODS parse_verification
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(verification) TYPE zif_ghes221=>verification
      RAISING cx_static_check.
    METHODS parse_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit) TYPE zif_ghes221=>commit
      RAISING cx_static_check.
    METHODS parse_branch_with_protection
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_with_protection) TYPE zif_ghes221=>branch_with_protection
      RAISING cx_static_check.
    METHODS parse_status_check_policy
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(status_check_policy) TYPE zif_ghes221=>status_check_policy
      RAISING cx_static_check.
    METHODS parse_protected_branch
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(protected_branch) TYPE zif_ghes221=>protected_branch
      RAISING cx_static_check.
    METHODS parse_pull_request_minimal
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_minimal) TYPE zif_ghes221=>pull_request_minimal
      RAISING cx_static_check.
    METHODS parse_check_run
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_run) TYPE zif_ghes221=>check_run
      RAISING cx_static_check.
    METHODS parse_check_annotation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_annotation) TYPE zif_ghes221=>check_annotation
      RAISING cx_static_check.
    METHODS parse_simple_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_commit) TYPE zif_ghes221=>simple_commit
      RAISING cx_static_check.
    METHODS parse_check_suite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_suite) TYPE zif_ghes221=>check_suite
      RAISING cx_static_check.
    METHODS parse_check_suite_preference
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(check_suite_preference) TYPE zif_ghes221=>check_suite_preference
      RAISING cx_static_check.
    METHODS parse_collaborator
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(collaborator) TYPE zif_ghes221=>collaborator
      RAISING cx_static_check.
    METHODS parse_repository_invitation
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_invitation) TYPE zif_ghes221=>repository_invitation
      RAISING cx_static_check.
    METHODS parse_commit_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_comment) TYPE zif_ghes221=>commit_comment
      RAISING cx_static_check.
    METHODS parse_scim_error
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(scim_error) TYPE zif_ghes221=>scim_error
      RAISING cx_static_check.
    METHODS parse_branch_short
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(branch_short) TYPE zif_ghes221=>branch_short
      RAISING cx_static_check.
    METHODS parse_link
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(link) TYPE zif_ghes221=>link
      RAISING cx_static_check.
    METHODS parse_pull_request_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_simple) TYPE zif_ghes221=>pull_request_simple
      RAISING cx_static_check.
    METHODS parse_simple_commit_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(simple_commit_status) TYPE zif_ghes221=>simple_commit_status
      RAISING cx_static_check.
    METHODS parse_combined_commit_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(combined_commit_status) TYPE zif_ghes221=>combined_commit_status
      RAISING cx_static_check.
    METHODS parse_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(status) TYPE zif_ghes221=>status
      RAISING cx_static_check.
    METHODS parse_diff_entry
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(diff_entry) TYPE zif_ghes221=>diff_entry
      RAISING cx_static_check.
    METHODS parse_commit_comparison
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_comparison) TYPE zif_ghes221=>commit_comparison
      RAISING cx_static_check.
    METHODS parse_content_tree
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_tree) TYPE zif_ghes221=>content_tree
      RAISING cx_static_check.
    METHODS parse_content_directory
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_directory) TYPE zif_ghes221=>content_directory
      RAISING cx_static_check.
    METHODS parse_content_file
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_file) TYPE zif_ghes221=>content_file
      RAISING cx_static_check.
    METHODS parse_content_symlink
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_symlink) TYPE zif_ghes221=>content_symlink
      RAISING cx_static_check.
    METHODS parse_content_submodule
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(content_submodule) TYPE zif_ghes221=>content_submodule
      RAISING cx_static_check.
    METHODS parse_file_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(file_commit) TYPE zif_ghes221=>file_commit
      RAISING cx_static_check.
    METHODS parse_contributor
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(contributor) TYPE zif_ghes221=>contributor
      RAISING cx_static_check.
    METHODS parse_deployment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment) TYPE zif_ghes221=>deployment
      RAISING cx_static_check.
    METHODS parse_deployment_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deployment_status) TYPE zif_ghes221=>deployment_status
      RAISING cx_static_check.
    METHODS parse_short_blob
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(short_blob) TYPE zif_ghes221=>short_blob
      RAISING cx_static_check.
    METHODS parse_blob
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(blob) TYPE zif_ghes221=>blob
      RAISING cx_static_check.
    METHODS parse_git_commit
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_commit) TYPE zif_ghes221=>git_commit
      RAISING cx_static_check.
    METHODS parse_git_ref
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_ref) TYPE zif_ghes221=>git_ref
      RAISING cx_static_check.
    METHODS parse_git_tag
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_tag) TYPE zif_ghes221=>git_tag
      RAISING cx_static_check.
    METHODS parse_git_tree
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(git_tree) TYPE zif_ghes221=>git_tree
      RAISING cx_static_check.
    METHODS parse_hook_response
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hook_response) TYPE zif_ghes221=>hook_response
      RAISING cx_static_check.
    METHODS parse_hook
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hook) TYPE zif_ghes221=>hook
      RAISING cx_static_check.
    METHODS parse_issue_event_label
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_label) TYPE zif_ghes221=>issue_event_label
      RAISING cx_static_check.
    METHODS parse_issue_event_dismissed_re
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_dismissed_review) TYPE zif_ghes221=>issue_event_dismissed_review
      RAISING cx_static_check.
    METHODS parse_issue_event_milestone
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_milestone) TYPE zif_ghes221=>issue_event_milestone
      RAISING cx_static_check.
    METHODS parse_issue_event_project_card
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_project_card) TYPE zif_ghes221=>issue_event_project_card
      RAISING cx_static_check.
    METHODS parse_issue_event_rename
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_rename) TYPE zif_ghes221=>issue_event_rename
      RAISING cx_static_check.
    METHODS parse_issue_event
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event) TYPE zif_ghes221=>issue_event
      RAISING cx_static_check.
    METHODS parse_issue_event_for_issue
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_event_for_issue) TYPE zif_ghes221=>issue_event_for_issue
      RAISING cx_static_check.
    METHODS parse_deploy_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(deploy_key) TYPE zif_ghes221=>deploy_key
      RAISING cx_static_check.
    METHODS parse_language
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(language) TYPE zif_ghes221=>language
      RAISING cx_static_check.
    METHODS parse_license_content
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(license_content) TYPE zif_ghes221=>license_content
      RAISING cx_static_check.
    METHODS parse_pages_source_hash
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pages_source_hash) TYPE zif_ghes221=>pages_source_hash
      RAISING cx_static_check.
    METHODS parse_page
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page) TYPE zif_ghes221=>page
      RAISING cx_static_check.
    METHODS parse_page_build
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page_build) TYPE zif_ghes221=>page_build
      RAISING cx_static_check.
    METHODS parse_page_build_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(page_build_status) TYPE zif_ghes221=>page_build_status
      RAISING cx_static_check.
    METHODS parse_repository_pre_receive_h
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_pre_receive_hook) TYPE zif_ghes221=>repository_pre_receive_hook
      RAISING cx_static_check.
    METHODS parse_pull_request
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request) TYPE zif_ghes221=>pull_request
      RAISING cx_static_check.
    METHODS parse_pull_request_review_comm
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review_comment) TYPE zif_ghes221=>pull_request_review_comment
      RAISING cx_static_check.
    METHODS parse_pull_request_merge_resul
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_merge_result) TYPE zif_ghes221=>pull_request_merge_result
      RAISING cx_static_check.
    METHODS parse_pull_request_review_requ
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review_request) TYPE zif_ghes221=>pull_request_review_request
      RAISING cx_static_check.
    METHODS parse_pull_request_review
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(pull_request_review) TYPE zif_ghes221=>pull_request_review
      RAISING cx_static_check.
    METHODS parse_review_comment
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(review_comment) TYPE zif_ghes221=>review_comment
      RAISING cx_static_check.
    METHODS parse_release_asset
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(release_asset) TYPE zif_ghes221=>release_asset
      RAISING cx_static_check.
    METHODS parse_release
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(release) TYPE zif_ghes221=>release
      RAISING cx_static_check.
    METHODS parse_stargazer
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(stargazer) TYPE zif_ghes221=>stargazer
      RAISING cx_static_check.
    METHODS parse_code_frequency_stat
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_frequency_stat) TYPE zif_ghes221=>code_frequency_stat
      RAISING cx_static_check.
    METHODS parse_commit_activity
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_activity) TYPE zif_ghes221=>commit_activity
      RAISING cx_static_check.
    METHODS parse_contributor_activity
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(contributor_activity) TYPE zif_ghes221=>contributor_activity
      RAISING cx_static_check.
    METHODS parse_participation_stats
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(participation_stats) TYPE zif_ghes221=>participation_stats
      RAISING cx_static_check.
    METHODS parse_repository_subscription
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repository_subscription) TYPE zif_ghes221=>repository_subscription
      RAISING cx_static_check.
    METHODS parse_tag
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(tag) TYPE zif_ghes221=>tag
      RAISING cx_static_check.
    METHODS parse_topic
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(topic) TYPE zif_ghes221=>topic
      RAISING cx_static_check.
    METHODS parse_search_result_text_match
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(search_result_text_matches) TYPE zif_ghes221=>search_result_text_matches
      RAISING cx_static_check.
    METHODS parse_code_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(code_search_result_item) TYPE zif_ghes221=>code_search_result_item
      RAISING cx_static_check.
    METHODS parse_commit_search_result_ite
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(commit_search_result_item) TYPE zif_ghes221=>commit_search_result_item
      RAISING cx_static_check.
    METHODS parse_issue_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(issue_search_result_item) TYPE zif_ghes221=>issue_search_result_item
      RAISING cx_static_check.
    METHODS parse_label_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(label_search_result_item) TYPE zif_ghes221=>label_search_result_item
      RAISING cx_static_check.
    METHODS parse_repo_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(repo_search_result_item) TYPE zif_ghes221=>repo_search_result_item
      RAISING cx_static_check.
    METHODS parse_topic_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(topic_search_result_item) TYPE zif_ghes221=>topic_search_result_item
      RAISING cx_static_check.
    METHODS parse_user_search_result_item
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(user_search_result_item) TYPE zif_ghes221=>user_search_result_item
      RAISING cx_static_check.
    METHODS parse_configuration_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(configuration_status) TYPE zif_ghes221=>configuration_status
      RAISING cx_static_check.
    METHODS parse_maintenance_status
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(maintenance_status) TYPE zif_ghes221=>maintenance_status
      RAISING cx_static_check.
    METHODS parse_enterprise_settings
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(enterprise_settings) TYPE zif_ghes221=>enterprise_settings
      RAISING cx_static_check.
    METHODS parse_ssh_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(ssh_key) TYPE zif_ghes221=>ssh_key
      RAISING cx_static_check.
    METHODS parse_private_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(private_user) TYPE zif_ghes221=>private_user
      RAISING cx_static_check.
    METHODS parse_public_user
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(public_user) TYPE zif_ghes221=>public_user
      RAISING cx_static_check.
    METHODS parse_email
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(email) TYPE zif_ghes221=>email
      RAISING cx_static_check.
    METHODS parse_gpg_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(gpg_key) TYPE zif_ghes221=>gpg_key
      RAISING cx_static_check.
    METHODS parse_key
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(key) TYPE zif_ghes221=>key
      RAISING cx_static_check.
    METHODS parse_starred_repository
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(starred_repository) TYPE zif_ghes221=>starred_repository
      RAISING cx_static_check.
    METHODS parse_hovercard
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(hovercard) TYPE zif_ghes221=>hovercard
      RAISING cx_static_check.
    METHODS parse_key_simple
      IMPORTING iv_prefix TYPE string
      RETURNING VALUE(key_simple) TYPE zif_ghes221=>key_simple
      RAISING cx_static_check.
ENDCLASS.

CLASS zcl_ghes221 IMPLEMENTATION.
  METHOD constructor.
    mi_client = ii_client.
  ENDMETHOD.

  METHOD send_receive.
    mi_client->send( ).
    mi_client->receive( ).
    mi_client->response->get_status( IMPORTING code = rv_code ).
  ENDMETHOD.

  METHOD parse_global_hook.
  ENDMETHOD.

  METHOD parse_global_hook_2.
  ENDMETHOD.

  METHOD parse_enterprise_public_key.
  ENDMETHOD.

  METHOD parse_ldap_mapping_team.
  ENDMETHOD.

  METHOD parse_ldap_mapping_user.
  ENDMETHOD.

  METHOD parse_organization_simple.
  ENDMETHOD.

  METHOD parse_pre_receive_environment.
  ENDMETHOD.

  METHOD parse_pre_receive_environment_.
  ENDMETHOD.

  METHOD parse_pre_receive_hook.
  ENDMETHOD.

  METHOD parse_simple_user.
  ENDMETHOD.

  METHOD parse_app_permissions.
  ENDMETHOD.

  METHOD parse_scoped_installation.
  ENDMETHOD.

  METHOD parse_authorization.
  ENDMETHOD.

  METHOD parse_integration.
  ENDMETHOD.

  METHOD parse_basic_error.
  ENDMETHOD.

  METHOD parse_validation_error_simple.
  ENDMETHOD.

  METHOD parse_enterprise.
  ENDMETHOD.

  METHOD parse_installation_ghes_2.
  ENDMETHOD.

  METHOD parse_license_simple.
  ENDMETHOD.

  METHOD parse_repository.
  ENDMETHOD.

  METHOD parse_installation_token.
  ENDMETHOD.

  METHOD parse_validation_error.
  ENDMETHOD.

  METHOD parse_application_grant.
  ENDMETHOD.

  METHOD parse_code_of_conduct.
  ENDMETHOD.

  METHOD parse_content_reference_attach.
  ENDMETHOD.

  METHOD parse_license_info.
  ENDMETHOD.

  METHOD parse_enterprise_overview.
  ENDMETHOD.

  METHOD parse_actor.
  ENDMETHOD.

  METHOD parse_label.
  ENDMETHOD.

  METHOD parse_milestone.
  ENDMETHOD.

  METHOD parse_author_association.
  ENDMETHOD.

  METHOD parse_issue_simple.
  ENDMETHOD.

  METHOD parse_reaction_rollup.
  ENDMETHOD.

  METHOD parse_issue_comment.
  ENDMETHOD.

  METHOD parse_event.
  ENDMETHOD.

  METHOD parse_link_with_type.
  ENDMETHOD.

  METHOD parse_feed.
  ENDMETHOD.

  METHOD parse_base_gist.
  ENDMETHOD.

  METHOD parse_gist_simple.
  ENDMETHOD.

  METHOD parse_gist_comment.
  ENDMETHOD.

  METHOD parse_gist_commit.
  ENDMETHOD.

  METHOD parse_gitignore_template.
  ENDMETHOD.

  METHOD parse_issue.
  ENDMETHOD.

  METHOD parse_license.
  ENDMETHOD.

  METHOD parse_api_overview.
  ENDMETHOD.

  METHOD parse_minimal_repository.
  ENDMETHOD.

  METHOD parse_thread.
  ENDMETHOD.

  METHOD parse_thread_subscription.
  ENDMETHOD.

  METHOD parse_organization_full.
  ENDMETHOD.

  METHOD parse_org_hook.
  ENDMETHOD.

  METHOD parse_webhook_config_url.
  ENDMETHOD.

  METHOD parse_webhook_config_content_t.
  ENDMETHOD.

  METHOD parse_webhook_config_secret.
  ENDMETHOD.

  METHOD parse_webhook_config_insecure_.
  ENDMETHOD.

  METHOD parse_org_membership.
  ENDMETHOD.

  METHOD parse_org_pre_receive_hook.
  ENDMETHOD.

  METHOD parse_project.
  ENDMETHOD.

  METHOD parse_team_simple.
  ENDMETHOD.

  METHOD parse_team.
  ENDMETHOD.

  METHOD parse_team_full.
  ENDMETHOD.

  METHOD parse_team_discussion.
  ENDMETHOD.

  METHOD parse_team_discussion_comment.
  ENDMETHOD.

  METHOD parse_reaction.
  ENDMETHOD.

  METHOD parse_team_membership.
  ENDMETHOD.

  METHOD parse_team_project.
  ENDMETHOD.

  METHOD parse_team_repository.
  ENDMETHOD.

  METHOD parse_project_card.
  ENDMETHOD.

  METHOD parse_project_column.
  ENDMETHOD.

  METHOD parse_repository_collaborator_.
  ENDMETHOD.

  METHOD parse_rate_limit.
  ENDMETHOD.

  METHOD parse_rate_limit_overview.
  ENDMETHOD.

  METHOD parse_full_repository.
  ENDMETHOD.

  METHOD parse_protected_branch_admin_e.
  ENDMETHOD.

  METHOD parse_protected_branch_pull_re.
  ENDMETHOD.

  METHOD parse_branch_restriction_polic.
  ENDMETHOD.

  METHOD parse_branch_protection.
  ENDMETHOD.

  METHOD parse_short_branch.
  ENDMETHOD.

  METHOD parse_git_user.
  ENDMETHOD.

  METHOD parse_verification.
  ENDMETHOD.

  METHOD parse_commit.
  ENDMETHOD.

  METHOD parse_branch_with_protection.
  ENDMETHOD.

  METHOD parse_status_check_policy.
  ENDMETHOD.

  METHOD parse_protected_branch.
  ENDMETHOD.

  METHOD parse_pull_request_minimal.
  ENDMETHOD.

  METHOD parse_check_run.
  ENDMETHOD.

  METHOD parse_check_annotation.
  ENDMETHOD.

  METHOD parse_simple_commit.
  ENDMETHOD.

  METHOD parse_check_suite.
  ENDMETHOD.

  METHOD parse_check_suite_preference.
  ENDMETHOD.

  METHOD parse_collaborator.
  ENDMETHOD.

  METHOD parse_repository_invitation.
  ENDMETHOD.

  METHOD parse_commit_comment.
  ENDMETHOD.

  METHOD parse_scim_error.
  ENDMETHOD.

  METHOD parse_branch_short.
  ENDMETHOD.

  METHOD parse_link.
  ENDMETHOD.

  METHOD parse_pull_request_simple.
  ENDMETHOD.

  METHOD parse_simple_commit_status.
  ENDMETHOD.

  METHOD parse_combined_commit_status.
  ENDMETHOD.

  METHOD parse_status.
  ENDMETHOD.

  METHOD parse_diff_entry.
  ENDMETHOD.

  METHOD parse_commit_comparison.
  ENDMETHOD.

  METHOD parse_content_tree.
  ENDMETHOD.

  METHOD parse_content_directory.
  ENDMETHOD.

  METHOD parse_content_file.
  ENDMETHOD.

  METHOD parse_content_symlink.
  ENDMETHOD.

  METHOD parse_content_submodule.
  ENDMETHOD.

  METHOD parse_file_commit.
  ENDMETHOD.

  METHOD parse_contributor.
  ENDMETHOD.

  METHOD parse_deployment.
  ENDMETHOD.

  METHOD parse_deployment_status.
  ENDMETHOD.

  METHOD parse_short_blob.
  ENDMETHOD.

  METHOD parse_blob.
  ENDMETHOD.

  METHOD parse_git_commit.
  ENDMETHOD.

  METHOD parse_git_ref.
  ENDMETHOD.

  METHOD parse_git_tag.
  ENDMETHOD.

  METHOD parse_git_tree.
  ENDMETHOD.

  METHOD parse_hook_response.
  ENDMETHOD.

  METHOD parse_hook.
  ENDMETHOD.

  METHOD parse_issue_event_label.
  ENDMETHOD.

  METHOD parse_issue_event_dismissed_re.
  ENDMETHOD.

  METHOD parse_issue_event_milestone.
  ENDMETHOD.

  METHOD parse_issue_event_project_card.
  ENDMETHOD.

  METHOD parse_issue_event_rename.
  ENDMETHOD.

  METHOD parse_issue_event.
  ENDMETHOD.

  METHOD parse_issue_event_for_issue.
  ENDMETHOD.

  METHOD parse_deploy_key.
  ENDMETHOD.

  METHOD parse_language.
  ENDMETHOD.

  METHOD parse_license_content.
  ENDMETHOD.

  METHOD parse_pages_source_hash.
  ENDMETHOD.

  METHOD parse_page.
  ENDMETHOD.

  METHOD parse_page_build.
  ENDMETHOD.

  METHOD parse_page_build_status.
  ENDMETHOD.

  METHOD parse_repository_pre_receive_h.
  ENDMETHOD.

  METHOD parse_pull_request.
  ENDMETHOD.

  METHOD parse_pull_request_review_comm.
  ENDMETHOD.

  METHOD parse_pull_request_merge_resul.
  ENDMETHOD.

  METHOD parse_pull_request_review_requ.
  ENDMETHOD.

  METHOD parse_pull_request_review.
  ENDMETHOD.

  METHOD parse_review_comment.
  ENDMETHOD.

  METHOD parse_release_asset.
  ENDMETHOD.

  METHOD parse_release.
  ENDMETHOD.

  METHOD parse_stargazer.
  ENDMETHOD.

  METHOD parse_code_frequency_stat.
  ENDMETHOD.

  METHOD parse_commit_activity.
  ENDMETHOD.

  METHOD parse_contributor_activity.
  ENDMETHOD.

  METHOD parse_participation_stats.
  ENDMETHOD.

  METHOD parse_repository_subscription.
  ENDMETHOD.

  METHOD parse_tag.
  ENDMETHOD.

  METHOD parse_topic.
  ENDMETHOD.

  METHOD parse_search_result_text_match.
  ENDMETHOD.

  METHOD parse_code_search_result_item.
  ENDMETHOD.

  METHOD parse_commit_search_result_ite.
  ENDMETHOD.

  METHOD parse_issue_search_result_item.
  ENDMETHOD.

  METHOD parse_label_search_result_item.
  ENDMETHOD.

  METHOD parse_repo_search_result_item.
  ENDMETHOD.

  METHOD parse_topic_search_result_item.
  ENDMETHOD.

  METHOD parse_user_search_result_item.
  ENDMETHOD.

  METHOD parse_configuration_status.
  ENDMETHOD.

  METHOD parse_maintenance_status.
  ENDMETHOD.

  METHOD parse_enterprise_settings.
  ENDMETHOD.

  METHOD parse_ssh_key.
  ENDMETHOD.

  METHOD parse_private_user.
  ENDMETHOD.

  METHOD parse_public_user.
  ENDMETHOD.

  METHOD parse_email.
  ENDMETHOD.

  METHOD parse_gpg_key.
  ENDMETHOD.

  METHOD parse_key.
  ENDMETHOD.

  METHOD parse_starred_repository.
  ENDMETHOD.

  METHOD parse_hovercard.
  ENDMETHOD.

  METHOD parse_key_simple.
  ENDMETHOD.

  METHOD zif_ghes221~meta_root.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_global_w.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks'.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_global.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_global_we.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks/{hook_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_global_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_global.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks/{hook_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_global_hook_2( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_global.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks/{hook_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_ping_global_w.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/hooks/{hook_id}/pings'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_public_k.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/keys'.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_public.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/keys/{key_ids}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_ldap_m.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/ldap/teams/{team_id}/mapping'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_ldap_mapping_team( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_sync_ldap_map.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/ldap/teams/{team_id}/sync'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_ldap01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/ldap/users/{username}/mapping'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_ldap_mapping_user( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_sync_ldap_m01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/ldap/users/{username}/sync'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/organizations'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_org_na.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/organizations/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_pre_rece.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments'.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_pre_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_pre_recei.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments/{pre_receive_environment_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pre_receive_environment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_pre_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments/{pre_receive_environment_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pre_receive_environment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_pre_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments/{pre_receive_environment_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_start_pre_rec.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments/{pre_receive_environment_id}/downloads'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_download_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pre_receive_environment_( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_pre_re01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-hooks'.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_pre_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-hooks'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_pre_rec01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-hooks/{pre_receive_hook_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pre_receive_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_pre_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-hooks/{pre_receive_hook_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pre_receive_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_pre_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/pre-receive-hooks/{pre_receive_hook_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_personal.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/tokens'.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_person.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/tokens/{token_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/users'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_userna.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/users/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/users/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_impers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/users/{username}/authorizations'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_delete_impers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/admin/users/{username}/authorizations'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_integration( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_create_from_manifest.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app-manifests/{code}/conversions'.
    REPLACE ALL OCCURRENCES OF '{code}' IN lv_uri WITH code.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_list_installations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app/installations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app/installations/{installation_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation_ghes_2( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_delete_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app/installations/{installation_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_create_installation_acces.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/app/installations/{installation_id}/access_tokens'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_list_gran.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/grants'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_get_grant.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/grants/{grant_id}'.
    REPLACE ALL OCCURRENCES OF '{grant_id}' IN lv_uri WITH grant_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_application_grant( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_delete_gr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/grants/{grant_id}'.
    REPLACE ALL OCCURRENCES OF '{grant_id}' IN lv_uri WITH grant_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_delete_authorization.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/grant'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_revoke_grant_for_applicat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/grants/{access_token}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_check_token.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/token'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_reset_token.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/token'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_delete_token.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/token'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_check_authorization.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_reset_authorization.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_revoke_authorization_for_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/applications/{client_id}/tokens/{access_token}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_by_slug.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/apps/{app_slug}'.
    REPLACE ALL OCCURRENCES OF '{app_slug}' IN lv_uri WITH app_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_integration( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_list_auth.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_create_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_get_or_cr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations/clients/{client_id}'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_get_or_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations/clients/{client_id}/{fingerprint}'.
    REPLACE ALL OCCURRENCES OF '{fingerprint}' IN lv_uri WITH fingerprint.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_get_autho.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_update_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_authorization( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~oauth_authorizations_delete_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/authorizations/{authorization_id}'.
    REPLACE ALL OCCURRENCES OF '{authorization_id}' IN lv_uri WITH authorization_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~codes_of_conduct_get_all_codes.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/codes_of_conduct'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~codes_of_conduct_get_conduct_c.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/codes_of_conduct/{key}'.
    REPLACE ALL OCCURRENCES OF '{key}' IN lv_uri WITH key.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_code_of_conduct( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_create_content_attachment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/content_references/{content_reference_id}/attachments'.
    REPLACE ALL OCCURRENCES OF '{content_reference_id}' IN lv_uri WITH content_reference_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_content_reference_attach( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~emojis_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/emojis'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_license_i.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/enterprise/settings/license'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_license_info( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_type_stat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/enterprise/stats/{type}'.
    REPLACE ALL OCCURRENCES OF '{type}' IN lv_uri WITH type.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_enterprise_overview( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_public_events.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/events'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_get_feeds.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/feeds'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_feed( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gists_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_public.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/public'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_starred.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/starred'.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_simple( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gists_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_simple( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gists_delete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_create_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_get_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gists_update_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gists_delete_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/commits'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_forks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/forks'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_fork.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/forks'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_check_is_starred.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_star.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_unstar.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/star'.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_get_revision.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gists/{gist_id}/{sha}'.
    REPLACE ALL OCCURRENCES OF '{sha}' IN lv_uri WITH sha.
    REPLACE ALL OCCURRENCES OF '{gist_id}' IN lv_uri WITH gist_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gist_simple( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~gitignore_get_all_templates.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gitignore/templates'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gitignore_get_template.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/gitignore/templates/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gitignore_template( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_list_repos_accessible_to_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/installation/repositories'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_revoke_installation_acces.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/installation/token'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/issues'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF collab IS SUPPLIED.
      mi_client->request->set_form_field( name = 'collab' value = collab ).
    ENDIF.
    IF orgs IS SUPPLIED.
      mi_client->request->set_form_field( name = 'orgs' value = orgs ).
    ENDIF.
    IF owned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'owned' value = owned ).
    ENDIF.
    IF pulls IS SUPPLIED.
      mi_client->request->set_form_field( name = 'pulls' value = pulls ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~licenses_get_all_commonly_used.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/licenses'.
    IF featured IS SUPPLIED.
      mi_client->request->set_form_field( name = 'featured' value = featured ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~licenses_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/licenses/{license}'.
    REPLACE ALL OCCURRENCES OF '{license}' IN lv_uri WITH license.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_license( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~markdown_render.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/markdown'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~markdown_render_raw.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/markdown/raw'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~meta_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/meta'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_api_overview( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_public_events_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/networks/{owner}/{repo}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_notifications_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications'.
    IF all IS SUPPLIED.
      mi_client->request->set_form_field( name = 'all' value = all ).
    ENDIF.
    IF participating IS SUPPLIED.
      mi_client->request->set_form_field( name = 'participating' value = participating ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_mark_notifications_as.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_get_thread.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications/threads/{thread_id}'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_thread( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_mark_thread_as_read.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications/threads/{thread_id}'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_get_thread_subscripti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_thread_subscription( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_set_thread_subscripti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_thread_subscription( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_delete_thread_subscri.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/notifications/threads/{thread_id}/subscription'.
    REPLACE ALL OCCURRENCES OF '{thread_id}' IN lv_uri WITH thread_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~meta_get_octocat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/octocat'.
    IF s IS SUPPLIED.
      mi_client->request->set_form_field( name = 's' value = s ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/organizations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_organization_full( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_organization_full( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_public_org_event.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/events'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_webhooks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_create_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_get_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_update_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_delete_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_ping_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/hooks/{hook_id}/pings'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_org_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/installation'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation_ghes_2( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_app_installations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/installations'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/issues'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_members.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_check_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_remove_member.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_get_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_set_membership_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_remove_membership_for_use.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_outside_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/outside_collaborators'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_convert_member_to_outside.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/outside_collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_remove_outside_collaborat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/outside_collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_pre_re02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/pre-receive-hooks'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_pre_rec02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_pre_receive_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_pre_02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_pre_receive_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_remove_pre_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_pre_receive_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_create_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_public_members.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/public_members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_check_public_membership_f.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_set_public_membership_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_remove_public_membership_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/public_members/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_for_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_by_name.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_full( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_discussions_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_create_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_discussion_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_discussion_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_create_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_discussion_comment_i.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_discussion_commen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_team_discus.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_team_disc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_team_disc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_team_disc01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_team_di01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_team_di01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_members_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/members'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_membership_for_user_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_membership.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_membership_for_us.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_projects_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/projects'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_check_permissions_for_pr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_project( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_project_pe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_project_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/projects/{project_id}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_repos_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/repos'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_check_permissions_for_re.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_repo_permi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_repo_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_child_in_org.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/orgs/{org}/teams/{team_slug}/teams'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    REPLACE ALL OCCURRENCES OF '{team_slug}' IN lv_uri WITH team_slug.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_get_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_card( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_update_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_card( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_delete_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/cards/{card_id}'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_move_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/cards/{card_id}/moves'.
    REPLACE ALL OCCURRENCES OF '{card_id}' IN lv_uri WITH card_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_get_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_column( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_update_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project_column( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_delete_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_cards.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}/cards'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    IF archived_state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'archived_state' value = archived_state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_create_card.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}/cards'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_move_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/columns/{column_id}/moves'.
    REPLACE ALL OCCURRENCES OF '{column_id}' IN lv_uri WITH column_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_project( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_delete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_collaborators.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/collaborators'.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_add_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_remove_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_get_permission_for_us.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/collaborators/{username}/permission'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_collaborator_( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_columns.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/columns'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_create_column.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/projects/{project_id}/columns'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~rate_limit_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/rate_limit'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_rate_limit_overview( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/reactions/{reaction_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_full_repository( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_full_repository( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_assignees.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_check_user_can_be_assig.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/assignees/{assignee}'.
    REPLACE ALL OCCURRENCES OF '{assignee}' IN lv_uri WITH assignee.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_branches.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF protected IS SUPPLIED.
      mi_client->request->set_form_field( name = 'protected' value = protected ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_branch.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_branch_with_protection( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_branch_protection( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_branch_protection.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_admin_branch_protect.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_set_admin_branch_protect.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_admin_branch_prot.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_pull_request_review_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_pull_request_revi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_pull_re( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_pull_request_revi.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_commit_signature_pro.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_commit_signature_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_protected_branch_admin_e( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_commit_signature_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_status_checks_protec.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_status_check_policy( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_status_check_prot.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_status_check_policy( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_status_check_prot.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_all_status_check_con.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_add_status_check_context.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_set_status_check_context.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_status_check_cont.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_access_restrictions.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_branch_restriction_polic( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_access_restrictio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_apps_with_access_to_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_add_app_access_restricti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_set_app_access_restricti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_app_access_restri.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_teams_with_access_to.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_add_team_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_set_team_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_team_access_restr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_users_with_access_to.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_add_user_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_set_user_access_restrict.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_user_access_restr.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{branch}' IN lv_uri WITH branch.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-runs/{check_run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_run( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~checks_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-runs/{check_run_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_run( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~checks_list_annotations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_run_id}' IN lv_uri WITH check_run_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_create_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-suites'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_set_suites_preferences.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-suites/preferences'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_suite_preference( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~checks_get_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-suites/{check_suite_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_check_suite( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~checks_list_for_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_rerequest_suite.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{check_suite_id}' IN lv_uri WITH check_suite_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_collaborators.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/collaborators'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_check_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_add_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_remove_collaborator.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/collaborators/{username}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_collaborator_permiss.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/collaborators/{username}/permission'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_collaborator_( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_commit_comments_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_commit_comm.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_commit_co.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_reaction( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_commit_co.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sha IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sha' value = sha ).
    ENDIF.
    IF path IS SUPPLIED.
      mi_client->request->set_form_field( name = 'path' value = path ).
    ENDIF.
    IF author IS SUPPLIED.
      mi_client->request->set_form_field( name = 'author' value = author ).
    ENDIF.
    IF until IS SUPPLIED.
      mi_client->request->set_form_field( name = 'until' value = until ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_branches_for_head_c.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_comments_for_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{commit_sha}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_commit_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{commit_sha}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_pull_requests_assoc.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{commit_sha}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~checks_list_for_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{ref}/check-runs'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF status IS SUPPLIED.
      mi_client->request->set_form_field( name = 'status' value = status ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~checks_list_suites_for_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{ref}/check-suites'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF app_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'app_id' value = app_id ).
    ENDIF.
    IF check_name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'check_name' value = check_name ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_combined_status_for_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{ref}/status'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_combined_commit_status( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_commit_statuses_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/commits/{ref}/statuses'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~codes_of_conduct_get_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/community/code_of_conduct'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_code_of_conduct( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_compare_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/compare/{base}...{head}'.
    REPLACE ALL OCCURRENCES OF '{base}' IN lv_uri WITH base.
    REPLACE ALL OCCURRENCES OF '{head}' IN lv_uri WITH head.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_commit_comparison( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_content.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_or_update_file_co.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_file_commit( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_file.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/contents/{path}'.
    REPLACE ALL OCCURRENCES OF '{path}' IN lv_uri WITH path.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_file_commit( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_contributors.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/contributors'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF anon IS SUPPLIED.
      mi_client->request->set_form_field( name = 'anon' value = anon ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_deployments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sha IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sha' value = sha ).
    ENDIF.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    IF task IS SUPPLIED.
      mi_client->request->set_form_field( name = 'task' value = task ).
    ENDIF.
    IF environment IS SUPPLIED.
      mi_client->request->set_form_field( name = 'environment' value = environment ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_deployment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_deployment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments/{deployment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_deployment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_deployment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments/{deployment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_deployment_statuses.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments/{deployment_id}/statuses'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_deployment_status.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments/{deployment_id}/statuses'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_deployment_status.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}'.
    REPLACE ALL OCCURRENCES OF '{status_id}' IN lv_uri WITH status_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{deployment_id}' IN lv_uri WITH deployment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_deployment_status( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_dispatch_event.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/dispatches'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_repo_events.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_forks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/forks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_fork.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/forks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_create_blob.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/blobs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_get_blob.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/blobs/{file_sha}'.
    REPLACE ALL OCCURRENCES OF '{file_sha}' IN lv_uri WITH file_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_blob( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~git_create_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_get_commit.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/commits/{commit_sha}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{commit_sha}' IN lv_uri WITH commit_sha.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_commit( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~git_list_matching_refs.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/matching-refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_get_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/ref/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_ref( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~git_create_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/refs'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_update_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_ref( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~git_delete_ref.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/refs/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_create_tag.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/tags'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_get_tag.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/tags/{tag_sha}'.
    REPLACE ALL OCCURRENCES OF '{tag_sha}' IN lv_uri WITH tag_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_tag( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~git_create_tree.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/trees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~git_get_tree.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/git/trees/{tree_sha}'.
    REPLACE ALL OCCURRENCES OF '{tree_sha}' IN lv_uri WITH tree_sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF recursive IS SUPPLIED.
      mi_client->request->set_form_field( name = 'recursive' value = recursive ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_git_tree( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_webhooks.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_hook( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks/{hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_ping_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks/{hook_id}/pings'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_test_push_webhook.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/hooks/{hook_id}/tests'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_repo_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/installation'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation_ghes_2( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_invitations.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/invitations'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_invitation( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF milestone IS SUPPLIED.
      mi_client->request->set_form_field( name = 'milestone' value = milestone ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF assignee IS SUPPLIED.
      mi_client->request->set_form_field( name = 'assignee' value = assignee ).
    ENDIF.
    IF creator IS SUPPLIED.
      mi_client->request->set_form_field( name = 'creator' value = creator ).
    ENDIF.
    IF mentioned IS SUPPLIED.
      mi_client->request->set_form_field( name = 'mentioned' value = mentioned ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_comments_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_get_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_update_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_delete_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_issue_comme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_issue_com.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_reaction( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_issue_com.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_events_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_get_event.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/events/{event_id}'.
    REPLACE ALL OCCURRENCES OF '{event_id}' IN lv_uri WITH event_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_event( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_add_assignees.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_remove_assignees.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/assignees'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_issue_simple( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_create_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_events.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_labels_on_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_add_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_set_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_remove_all_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_remove_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_lock.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/lock'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_unlock.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/lock'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_issue.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_events_for_timelin.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/issues/{issue_number}/timeline'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{issue_number}' IN lv_uri WITH issue_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_deploy_keys.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/keys'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/keys'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_deploy_key( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_deploy_key.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_labels_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_create_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_get_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_label( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_update_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_label( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_delete_label.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/labels/{name}'.
    REPLACE ALL OCCURRENCES OF '{name}' IN lv_uri WITH name.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_languages.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/languages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_language( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~licenses_get_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/license'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_license_content( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_merge.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/merges'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_milestones.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_create_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_get_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_milestone( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_update_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_milestone( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~issues_delete_milestone.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones/{milestone_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_labels_for_milesto.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/milestones/{milestone_number}/labels'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{milestone_number}' IN lv_uri WITH milestone_number.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_repo_notificatio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/notifications'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF all IS SUPPLIED.
      mi_client->request->set_form_field( name = 'all' value = all ).
    ENDIF.
    IF participating IS SUPPLIED.
      mi_client->request->set_form_field( name = 'participating' value = participating ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_mark_repo_notificatio.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/notifications'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_pages.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_page( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_pages_site.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_information_about.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_pages_site.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_pages_builds.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages/builds'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_request_pages_build.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages/builds'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_latest_pages_build.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages/builds/latest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_page_build( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_pages_build.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pages/builds/{build_id}'.
    REPLACE ALL OCCURRENCES OF '{build_id}' IN lv_uri WITH build_id.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_page_build( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_list_pre_re03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pre-receive-hooks'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_pre_rec03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_pre_receive_h( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_update_pre_03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_pre_receive_h( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_remove_pre_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_pre_receive_h( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/projects'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_create_for_repo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/projects'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF head IS SUPPLIED.
      mi_client->request->set_form_field( name = 'head' value = head ).
    ENDIF.
    IF base IS SUPPLIED.
      mi_client->request->set_form_field( name = 'base' value = base ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_create.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_review_comments_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_get_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review_comm( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_update_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review_comm( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_delete_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_pull_reques.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_pull_requ.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_reaction( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~reactions_delete_for_pull_requ.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_get.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_update.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_review_comments.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_create_review_comment.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_create_reply_for_review_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{comment_id}' IN lv_uri WITH comment_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/commits'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_files.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/files'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_check_if_merged.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/merge'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_merge.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/merge'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_merge_resul( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_requested_reviewers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review_requ( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_request_reviewers.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_remove_requested_reviewe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_reviews.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_create_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_get_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_update_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_delete_pending_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_list_comments_for_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~pulls_dismiss_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_submit_review.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{review_id}' IN lv_uri WITH review_id.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_pull_request_review( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~pulls_update_branch.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/pulls/{pull_number}/update-branch'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_readme.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/readme'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF ref IS SUPPLIED.
      mi_client->request->set_form_field( name = 'ref' value = ref ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_content_file( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_releases.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release_asset( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release_asset( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/assets/{asset_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{asset_id}' IN lv_uri WITH asset_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_latest_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/latest'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_release_by_tag.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/tags/{tag}'.
    REPLACE ALL OCCURRENCES OF '{tag}' IN lv_uri WITH tag.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_update_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_release( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_delete_release.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/{release_id}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_release_assets.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/{release_id}/assets'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_upload_release_asset.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/releases/{release_id}/assets'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    REPLACE ALL OCCURRENCES OF '{release_id}' IN lv_uri WITH release_id.
    IF name IS SUPPLIED.
      mi_client->request->set_form_field( name = 'name' value = name ).
    ENDIF.
    IF label IS SUPPLIED.
      mi_client->request->set_form_field( name = 'label' value = label ).
    ENDIF.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_stargazers_for_r.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stargazers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_code_frequency_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stats/code_frequency'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_commit_activity_stat.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stats/commit_activity'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_contributors_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stats/contributors'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_participation_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stats/participation'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_participation_stats( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_punch_card_stats.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/stats/punch_card'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_commit_status.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/statuses/{sha}'.
    REPLACE ALL OCCURRENCES OF '{sha}' IN lv_uri WITH sha.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_watchers_for_rep.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/subscribers'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_get_repo_subscription.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_subscription( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_set_repo_subscription.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_repository_subscription( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~activity_delete_repo_subscript.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/subscription'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_tags.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/tags'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_download_tarball_archive.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/tarball/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_teams.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/teams'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_get_all_topics.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/topics'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_topic( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_replace_all_topics.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/topics'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_topic( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~repos_transfer.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/transfer'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_enable_vulnerability_ale.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/vulnerability-alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_disable_vulnerability_al.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/vulnerability-alerts'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_download_zipball_archive.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{owner}/{repo}/zipball/{ref}'.
    REPLACE ALL OCCURRENCES OF '{ref}' IN lv_uri WITH ref.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_using_template.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repos/{template_owner}/{template_repo}/generate'.
    REPLACE ALL OCCURRENCES OF '{template_owner}' IN lv_uri WITH template_owner.
    REPLACE ALL OCCURRENCES OF '{template_repo}' IN lv_uri WITH template_repo.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_public.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/repositories'.
    IF visibility IS SUPPLIED.
      mi_client->request->set_form_field( name = 'visibility' value = visibility ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_code.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/code'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_commits.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/commits'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_issues_and_pull_request.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/issues'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_labels.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/labels'.
    mi_client->request->set_form_field( name = 'repository_id' value = repository_id ).
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_repos.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/repositories'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_topics.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/topics'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~search_users.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/search/users'.
    mi_client->request->set_form_field( name = 'q' value = q ).
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF order IS SUPPLIED.
      mi_client->request->set_form_field( name = 'order' value = order ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_configura.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/configcheck'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_configuration_status( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_start_configu.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/configure'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_maintenan.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/maintenance'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_maintenance_status( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_enable_or_dis.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/maintenance'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_maintenance_status( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_settings.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/settings'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_enterprise_settings( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_set_settings.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/settings'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_get_all_autho.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/settings/authorized-keys'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_add_authorize.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/settings/authorized-keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_remove_author.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/settings/authorized-keys'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_create_enterp.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/start'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_upgrade_licen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/setup/api/upgrade'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_full( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_discussions_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions'.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_create_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_discussion_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_discussion_commen01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments'.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_create_discussion_comm01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_discussion_comment_l.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_update_discussion_comm01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_discussion_comment( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_delete_discussion_comm01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_team_disc02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_team_di02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_list_for_team_disc03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/reactions'.
    IF content IS SUPPLIED.
      mi_client->request->set_form_field( name = 'content' value = content ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~reactions_create_for_team_di03.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/discussions/{discussion_number}/reactions'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_members_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/members'.
    IF role IS SUPPLIED.
      mi_client->request->set_form_field( name = 'role' value = role ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_member_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_member_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_member_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/members/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_get_membership_for_use01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_membersh01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_membership_for_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/memberships/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_projects_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/projects'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_check_permissions_for_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_team_project( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_project_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_project_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/projects/{project_id}'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_repos_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/repos'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_check_permissions_for_02.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_add_or_update_repo_per01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_remove_repo_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/repos/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_child_legacy.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/teams/{team_id}/teams'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_get_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_update_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user'.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_private_user( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~users_list_emails_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/emails'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_add_email_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/emails'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_delete_email_for_authent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/emails'.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_followers_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/followers'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_followed_by_authent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/following'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_check_person_is_followed.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_follow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_unfollow.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/following/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_gpg_keys_for_authen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/gpg_keys'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_create_gpg_key_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/gpg_keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_get_gpg_key_for_authenti.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/gpg_keys/{gpg_key_id}'.
    REPLACE ALL OCCURRENCES OF '{gpg_key_id}' IN lv_uri WITH gpg_key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_gpg_key( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~users_delete_gpg_key_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/gpg_keys/{gpg_key_id}'.
    REPLACE ALL OCCURRENCES OF '{gpg_key_id}' IN lv_uri WITH gpg_key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_list_installations_for_au.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/installations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_list_installation_repos_f.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/installations/{installation_id}/repositories'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_add_repo_to_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/installations/{installation_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~apps_remove_repo_from_installa.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/installations/{installation_id}/repositories/{repository_id}'.
    REPLACE ALL OCCURRENCES OF '{installation_id}' IN lv_uri WITH installation_id.
    REPLACE ALL OCCURRENCES OF '{repository_id}' IN lv_uri WITH repository_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~issues_list_for_authenticated_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/issues'.
    IF filter IS SUPPLIED.
      mi_client->request->set_form_field( name = 'filter' value = filter ).
    ENDIF.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF labels IS SUPPLIED.
      mi_client->request->set_form_field( name = 'labels' value = labels ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_public_ssh_keys_for.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/keys'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_create_public_ssh_key_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/keys'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_get_public_ssh_key_for_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_key( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~users_delete_public_ssh_key_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/keys/{key_id}'.
    REPLACE ALL OCCURRENCES OF '{key_id}' IN lv_uri WITH key_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_memberships_for_auth.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/memberships/orgs'.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_get_membership_for_authen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/memberships/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_update_membership_for_aut.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/memberships/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_org_membership( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_for_authenticated_us.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/orgs'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_create_for_authentica.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/projects'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_public_emails_for_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/public_emails'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_for_authenticated_u.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/repos'.
    IF visibility IS SUPPLIED.
      mi_client->request->set_form_field( name = 'visibility' value = visibility ).
    ENDIF.
    IF affiliation IS SUPPLIED.
      mi_client->request->set_form_field( name = 'affiliation' value = affiliation ).
    ENDIF.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF before IS SUPPLIED.
      mi_client->request->set_form_field( name = 'before' value = before ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_create_for_authenticated.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/repos'.
    mi_client->request->set_method( 'POST' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_invitations_for_aut.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/repository_invitations'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_accept_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/repository_invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'PATCH' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_decline_invitation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/repository_invitations/{invitation_id}'.
    REPLACE ALL OCCURRENCES OF '{invitation_id}' IN lv_uri WITH invitation_id.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_repos_starred_by.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/starred'.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_check_repo_is_starred.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_star_repo_for_authent.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_unstar_repo_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/starred/{owner}/{repo}'.
    REPLACE ALL OCCURRENCES OF '{owner}' IN lv_uri WITH owner.
    REPLACE ALL OCCURRENCES OF '{repo}' IN lv_uri WITH repo.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_watched_repos_fo.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/subscriptions'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~teams_list_for_authenticated_u.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/user/teams'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users'.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_get_by_username.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_events_for_authe.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/events'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_org_events_for_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/events/orgs/{org}'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    REPLACE ALL OCCURRENCES OF '{org}' IN lv_uri WITH org.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_public_events_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/events/public'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_followers_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/followers'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_following_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/following'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_check_following_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/following/{target_user}'.
    REPLACE ALL OCCURRENCES OF '{target_user}' IN lv_uri WITH target_user.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~gists_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/gists'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF since IS SUPPLIED.
      mi_client->request->set_form_field( name = 'since' value = since ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_list_gpg_keys_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/gpg_keys'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~users_get_context_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/hovercard'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF subject_type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'subject_type' value = subject_type ).
    ENDIF.
    IF subject_id IS SUPPLIED.
      mi_client->request->set_form_field( name = 'subject_id' value = subject_id ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_hovercard( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~apps_get_user_installation.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/installation'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
    CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).
    return_data = parse_installation_ghes_2( '' ).
  ENDMETHOD.

  METHOD zif_ghes221~users_list_public_keys_for_use.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/keys'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~orgs_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/orgs'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~projects_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/projects'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF state IS SUPPLIED.
      mi_client->request->set_form_field( name = 'state' value = state ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_received_events_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/received_events'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_received_public_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/received_events/public'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~repos_list_for_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/repos'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF type IS SUPPLIED.
      mi_client->request->set_form_field( name = 'type' value = type ).
    ENDIF.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_promote_user_.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/site_admin'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_demote_site_a.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/site_admin'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_repos_starred_01.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/starred'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF sort IS SUPPLIED.
      mi_client->request->set_form_field( name = 'sort' value = sort ).
    ENDIF.
    IF direction IS SUPPLIED.
      mi_client->request->set_form_field( name = 'direction' value = direction ).
    ENDIF.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~activity_list_repos_watched_by.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/subscriptions'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    IF per_page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'per_page' value = per_page ).
    ENDIF.
    IF page IS SUPPLIED.
      mi_client->request->set_form_field( name = 'page' value = page ).
    ENDIF.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_suspend_user.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/suspended'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'PUT' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~enterprise_admin_unsuspend_use.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/users/{username}/suspended'.
    REPLACE ALL OCCURRENCES OF '{username}' IN lv_uri WITH username.
    mi_client->request->set_method( 'DELETE' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

  METHOD zif_ghes221~meta_get_zen.
    DATA lv_code TYPE i.
    DATA lv_uri TYPE string VALUE '{protocol}://{hostname}/zen'.
    mi_client->request->set_method( 'GET' ).
    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).
    lv_code = send_receive( ).
    WRITE / lv_code.
    WRITE / mi_client->response->get_cdata( ).
* todo, handle more responses
  ENDMETHOD.

ENDCLASS.